
F446-CANBUS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080046a8  080046a8  000146a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004804  08004804  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004804  08004804  00014804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800480c  0800480c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800480c  0800480c  0001480c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004810  08004810  00014810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000070  08004884  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  08004884  00020354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4a6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002012  00000000  00000000  0002c546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002e558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  0002ef98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022620  00000000  00000000  0002f900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d724  00000000  00000000  00051f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb46e  00000000  00000000  0005f644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012aab2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cc0  00000000  00000000  0012ab04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004690 	.word	0x08004690

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08004690 	.word	0x08004690

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN */
bool CANSPI_Initialize(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 80005ba:	2300      	movs	r3, #0
 80005bc:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80005be:	2300      	movs	r3, #0
 80005c0:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80005c2:	2300      	movs	r3, #0
 80005c4:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80005c6:	2300      	movs	r3, #0
 80005c8:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 80005ca:	2300      	movs	r3, #0
 80005cc:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80005ce:	2300      	movs	r3, #0
 80005d0:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 80005d2:	2300      	movs	r3, #0
 80005d4:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 80005d6:	2300      	movs	r3, #0
 80005d8:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 80005da:	2300      	movs	r3, #0
 80005dc:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 80005de:	2300      	movs	r3, #0
 80005e0:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 80005e2:	2300      	movs	r3, #0
 80005e4:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 80005e6:	2300      	movs	r3, #0
 80005e8:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 80005ea:	2300      	movs	r3, #0
 80005ec:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 80005ee:	2308      	movs	r3, #8
 80005f0:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 80005f2:	2300      	movs	r3, #0
 80005f4:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 80005f6:	2300      	movs	r3, #0
 80005f8:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 80005fa:	2300      	movs	r3, #0
 80005fc:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 80005fe:	2300      	movs	r3, #0
 8000600:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000602:	2300      	movs	r3, #0
 8000604:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000606:	2300      	movs	r3, #0
 8000608:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 800060a:	2300      	movs	r3, #0
 800060c:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 800060e:	2300      	movs	r3, #0
 8000610:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000612:	2300      	movs	r3, #0
 8000614:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000616:	2300      	movs	r3, #0
 8000618:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 800061a:	2300      	movs	r3, #0
 800061c:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 800061e:	2300      	movs	r3, #0
 8000620:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000622:	2300      	movs	r3, #0
 8000624:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000626:	2300      	movs	r3, #0
 8000628:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 800062a:	2300      	movs	r3, #0
 800062c:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 800062e:	2308      	movs	r3, #8
 8000630:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000632:	2300      	movs	r3, #0
 8000634:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000636:	2300      	movs	r3, #0
 8000638:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 800063a:	f000 fbc3 	bl	8000dc4 <MCP2515_Initialize>
 800063e:	4603      	mov	r3, r0
 8000640:	f083 0301 	eor.w	r3, r3, #1
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <CANSPI_Initialize+0x9a>
    return false;
 800064a:	2300      	movs	r3, #0
 800064c:	e05e      	b.n	800070c <CANSPI_Initialize+0x158>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 800064e:	f000 fbdb 	bl	8000e08 <MCP2515_SetConfigMode>
 8000652:	4603      	mov	r3, r0
 8000654:	f083 0301 	eor.w	r3, r3, #1
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <CANSPI_Initialize+0xae>
    return false;
 800065e:	2300      	movs	r3, #0
 8000660:	e054      	b.n	800070c <CANSPI_Initialize+0x158>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	461a      	mov	r2, r3
 8000666:	2123      	movs	r1, #35	; 0x23
 8000668:	2020      	movs	r0, #32
 800066a:	f000 fc77 	bl	8000f5c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800066e:	463b      	mov	r3, r7
 8000670:	461a      	mov	r2, r3
 8000672:	2127      	movs	r1, #39	; 0x27
 8000674:	2024      	movs	r0, #36	; 0x24
 8000676:	f000 fc71 	bl	8000f5c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	461a      	mov	r2, r3
 8000680:	2103      	movs	r1, #3
 8000682:	2000      	movs	r0, #0
 8000684:	f000 fc6a 	bl	8000f5c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000688:	f107 0318 	add.w	r3, r7, #24
 800068c:	461a      	mov	r2, r3
 800068e:	2107      	movs	r1, #7
 8000690:	2004      	movs	r0, #4
 8000692:	f000 fc63 	bl	8000f5c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000696:	f107 0314 	add.w	r3, r7, #20
 800069a:	461a      	mov	r2, r3
 800069c:	210b      	movs	r1, #11
 800069e:	2008      	movs	r0, #8
 80006a0:	f000 fc5c 	bl	8000f5c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	461a      	mov	r2, r3
 80006aa:	2113      	movs	r1, #19
 80006ac:	2010      	movs	r0, #16
 80006ae:	f000 fc55 	bl	8000f5c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	461a      	mov	r2, r3
 80006b8:	2117      	movs	r1, #23
 80006ba:	2014      	movs	r0, #20
 80006bc:	f000 fc4e 	bl	8000f5c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80006c0:	f107 0308 	add.w	r3, r7, #8
 80006c4:	461a      	mov	r2, r3
 80006c6:	211b      	movs	r1, #27
 80006c8:	2018      	movs	r0, #24
 80006ca:	f000 fc47 	bl	8000f5c <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80006ce:	2104      	movs	r1, #4
 80006d0:	2060      	movs	r0, #96	; 0x60
 80006d2:	f000 fc1d 	bl	8000f10 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 80006d6:	2101      	movs	r1, #1
 80006d8:	2070      	movs	r0, #112	; 0x70
 80006da:	f000 fc19 	bl	8000f10 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 80006de:	2100      	movs	r1, #0
 80006e0:	202a      	movs	r0, #42	; 0x2a
 80006e2:	f000 fc15 	bl	8000f10 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 80006e6:	21e5      	movs	r1, #229	; 0xe5
 80006e8:	2029      	movs	r0, #41	; 0x29
 80006ea:	f000 fc11 	bl	8000f10 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 80006ee:	2183      	movs	r1, #131	; 0x83
 80006f0:	2028      	movs	r0, #40	; 0x28
 80006f2:	f000 fc0d 	bl	8000f10 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 80006f6:	f000 fba5 	bl	8000e44 <MCP2515_SetNormalMode>
 80006fa:	4603      	mov	r3, r0
 80006fc:	f083 0301 	eor.w	r3, r3, #1
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <CANSPI_Initialize+0x156>
    return false;
 8000706:	2300      	movs	r3, #0
 8000708:	e000      	b.n	800070c <CANSPI_Initialize+0x158>

  return true;
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(iCommsMessage_t * txMsg)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	// Pack message into uCAN_MSG to be transmitted by the driver
	uCAN_MSG tempCanMsg;
	tempCanMsg.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 800071c:	2301      	movs	r3, #1
 800071e:	723b      	strb	r3, [r7, #8]
	tempCanMsg.frame.id = txMsg->standardMessageID;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	60fb      	str	r3, [r7, #12]
	tempCanMsg.frame.dlc = txMsg->dataLength;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	789b      	ldrb	r3, [r3, #2]
 800072a:	743b      	strb	r3, [r7, #16]

	for(uint8_t i=0; i < txMsg->dataLength; i++)
 800072c:	2300      	movs	r3, #0
 800072e:	77fb      	strb	r3, [r7, #31]
 8000730:	e00b      	b.n	800074a <CANSPI_Transmit+0x36>
	{
		tempCanMsg.frame.data[i] = txMsg->data[i];
 8000732:	7ffa      	ldrb	r2, [r7, #31]
 8000734:	7ffb      	ldrb	r3, [r7, #31]
 8000736:	6879      	ldr	r1, [r7, #4]
 8000738:	440a      	add	r2, r1
 800073a:	78d2      	ldrb	r2, [r2, #3]
 800073c:	3320      	adds	r3, #32
 800073e:	443b      	add	r3, r7
 8000740:	f803 2c0f 	strb.w	r2, [r3, #-15]
	for(uint8_t i=0; i < txMsg->dataLength; i++)
 8000744:	7ffb      	ldrb	r3, [r7, #31]
 8000746:	3301      	adds	r3, #1
 8000748:	77fb      	strb	r3, [r7, #31]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	789b      	ldrb	r3, [r3, #2]
 800074e:	7ffa      	ldrb	r2, [r7, #31]
 8000750:	429a      	cmp	r2, r3
 8000752:	d3ee      	bcc.n	8000732 <CANSPI_Transmit+0x1e>
	}
	// fill rest of the data with zeros
	for(uint8_t i=txMsg->dataLength; i <8 ; i++)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	789b      	ldrb	r3, [r3, #2]
 8000758:	77bb      	strb	r3, [r7, #30]
 800075a:	e008      	b.n	800076e <CANSPI_Transmit+0x5a>
	{
		tempCanMsg.frame.data[i] = 0;
 800075c:	7fbb      	ldrb	r3, [r7, #30]
 800075e:	3320      	adds	r3, #32
 8000760:	443b      	add	r3, r7
 8000762:	2200      	movs	r2, #0
 8000764:	f803 2c0f 	strb.w	r2, [r3, #-15]
	for(uint8_t i=txMsg->dataLength; i <8 ; i++)
 8000768:	7fbb      	ldrb	r3, [r7, #30]
 800076a:	3301      	adds	r3, #1
 800076c:	77bb      	strb	r3, [r7, #30]
 800076e:	7fbb      	ldrb	r3, [r7, #30]
 8000770:	2b07      	cmp	r3, #7
 8000772:	d9f3      	bls.n	800075c <CANSPI_Transmit+0x48>
	}
	uint8_t returnValue = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	777b      	strb	r3, [r7, #29]

	idReg.tempSIDH = 0;
 8000778:	4b33      	ldr	r3, [pc, #204]	; (8000848 <CANSPI_Transmit+0x134>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
	idReg.tempSIDL = 0;
 800077e:	4b32      	ldr	r3, [pc, #200]	; (8000848 <CANSPI_Transmit+0x134>)
 8000780:	2200      	movs	r2, #0
 8000782:	705a      	strb	r2, [r3, #1]
	idReg.tempEID8 = 0;
 8000784:	4b30      	ldr	r3, [pc, #192]	; (8000848 <CANSPI_Transmit+0x134>)
 8000786:	2200      	movs	r2, #0
 8000788:	709a      	strb	r2, [r3, #2]
	idReg.tempEID0 = 0;
 800078a:	4b2f      	ldr	r3, [pc, #188]	; (8000848 <CANSPI_Transmit+0x134>)
 800078c:	2200      	movs	r2, #0
 800078e:	70da      	strb	r2, [r3, #3]

	ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000790:	f000 fc58 	bl	8001044 <MCP2515_ReadStatus>
 8000794:	4603      	mov	r3, r0
 8000796:	461a      	mov	r2, r3
 8000798:	4b2c      	ldr	r3, [pc, #176]	; (800084c <CANSPI_Transmit+0x138>)
 800079a:	701a      	strb	r2, [r3, #0]

	/* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
	// check which register is available by checking the TXREQ bit which indicates whether a tx message is pending
	if (ctrlStatus.TXB0REQ != 1)
 800079c:	4b2b      	ldr	r3, [pc, #172]	; (800084c <CANSPI_Transmit+0x138>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d113      	bne.n	80007d2 <CANSPI_Transmit+0xbe>
	{
	/* ID Type에 맞게 변환 */
	convertCANid2Reg(tempCanMsg.frame.id, tempCanMsg.frame.idType, &idReg);
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	7a39      	ldrb	r1, [r7, #8]
 80007ae:	4a26      	ldr	r2, [pc, #152]	; (8000848 <CANSPI_Transmit+0x134>)
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f970 	bl	8000a96 <convertCANid2Reg>

	/* Tx Buffer에 전송할 데이터 Loading */
	MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg.frame.dlc, &(tempCanMsg.frame.data[0]));
 80007b6:	7c3a      	ldrb	r2, [r7, #16]
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	3309      	adds	r3, #9
 80007be:	4922      	ldr	r1, [pc, #136]	; (8000848 <CANSPI_Transmit+0x134>)
 80007c0:	2040      	movs	r0, #64	; 0x40
 80007c2:	f000 fbf7 	bl	8000fb4 <MCP2515_LoadTxSequence>

	/* Tx Buffer의 데이터 전송요청 */
	MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80007c6:	2081      	movs	r0, #129	; 0x81
 80007c8:	f000 fc20 	bl	800100c <MCP2515_RequestToSend>

	returnValue = 1;
 80007cc:	2301      	movs	r3, #1
 80007ce:	777b      	strb	r3, [r7, #29]
 80007d0:	e034      	b.n	800083c <CANSPI_Transmit+0x128>
	}
	else if (ctrlStatus.TXB1REQ != 1)
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <CANSPI_Transmit+0x138>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	f003 0310 	and.w	r3, r3, #16
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d113      	bne.n	8000808 <CANSPI_Transmit+0xf4>
	{
	convertCANid2Reg(tempCanMsg.frame.id, tempCanMsg.frame.idType, &idReg);
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	7a39      	ldrb	r1, [r7, #8]
 80007e4:	4a18      	ldr	r2, [pc, #96]	; (8000848 <CANSPI_Transmit+0x134>)
 80007e6:	4618      	mov	r0, r3
 80007e8:	f000 f955 	bl	8000a96 <convertCANid2Reg>

	MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg.frame.dlc, &(tempCanMsg.frame.data[0]));
 80007ec:	7c3a      	ldrb	r2, [r7, #16]
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	3309      	adds	r3, #9
 80007f4:	4914      	ldr	r1, [pc, #80]	; (8000848 <CANSPI_Transmit+0x134>)
 80007f6:	2042      	movs	r0, #66	; 0x42
 80007f8:	f000 fbdc 	bl	8000fb4 <MCP2515_LoadTxSequence>
	MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80007fc:	2082      	movs	r0, #130	; 0x82
 80007fe:	f000 fc05 	bl	800100c <MCP2515_RequestToSend>

	returnValue = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	777b      	strb	r3, [r7, #29]
 8000806:	e019      	b.n	800083c <CANSPI_Transmit+0x128>
	}
	else if (ctrlStatus.TXB2REQ != 1)
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <CANSPI_Transmit+0x138>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d112      	bne.n	800083c <CANSPI_Transmit+0x128>
	{
	convertCANid2Reg(tempCanMsg.frame.id, tempCanMsg.frame.idType, &idReg);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	7a39      	ldrb	r1, [r7, #8]
 800081a:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <CANSPI_Transmit+0x134>)
 800081c:	4618      	mov	r0, r3
 800081e:	f000 f93a 	bl	8000a96 <convertCANid2Reg>

	MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg.frame.dlc, &(tempCanMsg.frame.data[0]));
 8000822:	7c3a      	ldrb	r2, [r7, #16]
 8000824:	f107 0308 	add.w	r3, r7, #8
 8000828:	3309      	adds	r3, #9
 800082a:	4907      	ldr	r1, [pc, #28]	; (8000848 <CANSPI_Transmit+0x134>)
 800082c:	2044      	movs	r0, #68	; 0x44
 800082e:	f000 fbc1 	bl	8000fb4 <MCP2515_LoadTxSequence>
	MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8000832:	2084      	movs	r0, #132	; 0x84
 8000834:	f000 fbea 	bl	800100c <MCP2515_RequestToSend>

	returnValue = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	777b      	strb	r3, [r7, #29]
	}

	return (returnValue);
 800083c:	7f7b      	ldrb	r3, [r7, #29]
}
 800083e:	4618      	mov	r0, r3
 8000840:	3720      	adds	r7, #32
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	20000090 	.word	0x20000090
 800084c:	2000008c 	.word	0x2000008c

08000850 <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(iCommsMessage_t * rxMsg)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	; 0x38
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	uCAN_MSG tempCanMsg;

	uint8_t returnValue = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	rx_reg_t rxReg;
	ctrl_rx_status_t rxStatus;

	rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 800085e:	f000 fc0f 	bl	8001080 <MCP2515_GetRxStatus>
 8000862:	4603      	mov	r3, r0
 8000864:	733b      	strb	r3, [r7, #12]

	/* 버퍼에 수신된 메시지가 있는지 확인 */
	if (rxStatus.rxBuffer != 0)
 8000866:	7b3b      	ldrb	r3, [r7, #12]
 8000868:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	f000 8089 	beq.w	8000986 <CANSPI_Receive+0x136>
	{
	/* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
	if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8000874:	7b3b      	ldrb	r3, [r7, #12]
 8000876:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800087a:	b2db      	uxtb	r3, r3
 800087c:	2b40      	cmp	r3, #64	; 0x40
 800087e:	bf0c      	ite	eq
 8000880:	2301      	moveq	r3, #1
 8000882:	2300      	movne	r3, #0
 8000884:	b2da      	uxtb	r2, r3
 8000886:	7b3b      	ldrb	r3, [r7, #12]
 8000888:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2bc0      	cmp	r3, #192	; 0xc0
 8000890:	bf0c      	ite	eq
 8000892:	2301      	moveq	r3, #1
 8000894:	2300      	movne	r3, #0
 8000896:	b2db      	uxtb	r3, r3
 8000898:	4313      	orrs	r3, r2
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d007      	beq.n	80008b0 <CANSPI_Receive+0x60>
	{
	  MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80008a0:	f107 0310 	add.w	r3, r7, #16
 80008a4:	220d      	movs	r2, #13
 80008a6:	4619      	mov	r1, r3
 80008a8:	2090      	movs	r0, #144	; 0x90
 80008aa:	f000 fb0d 	bl	8000ec8 <MCP2515_ReadRxSequence>
 80008ae:	e00c      	b.n	80008ca <CANSPI_Receive+0x7a>
	}
	else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80008b0:	7b3b      	ldrb	r3, [r7, #12]
 80008b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2b80      	cmp	r3, #128	; 0x80
 80008ba:	d106      	bne.n	80008ca <CANSPI_Receive+0x7a>
	{
	  MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80008bc:	f107 0310 	add.w	r3, r7, #16
 80008c0:	220d      	movs	r2, #13
 80008c2:	4619      	mov	r1, r3
 80008c4:	2094      	movs	r0, #148	; 0x94
 80008c6:	f000 faff 	bl	8000ec8 <MCP2515_ReadRxSequence>
	}

	/* Extended 타입 */
	if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80008ca:	7b3b      	ldrb	r3, [r7, #12]
 80008cc:	f003 0318 	and.w	r3, r3, #24
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	2b10      	cmp	r3, #16
 80008d4:	d10b      	bne.n	80008ee <CANSPI_Receive+0x9e>
	{
	  tempCanMsg.frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80008d6:	2302      	movs	r3, #2
 80008d8:	f887 3020 	strb.w	r3, [r7, #32]
	  tempCanMsg.frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80008dc:	7cb8      	ldrb	r0, [r7, #18]
 80008de:	7cf9      	ldrb	r1, [r7, #19]
 80008e0:	7c3a      	ldrb	r2, [r7, #16]
 80008e2:	7c7b      	ldrb	r3, [r7, #17]
 80008e4:	f000 f87c 	bl	80009e0 <convertReg2ExtendedCANid>
 80008e8:	4603      	mov	r3, r0
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
 80008ec:	e00a      	b.n	8000904 <CANSPI_Receive+0xb4>
	}
	else
	{
	  /* Standard 타입 */
	  tempCanMsg.frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80008ee:	2301      	movs	r3, #1
 80008f0:	f887 3020 	strb.w	r3, [r7, #32]
	  tempCanMsg.frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80008f4:	7c3b      	ldrb	r3, [r7, #16]
 80008f6:	7c7a      	ldrb	r2, [r7, #17]
 80008f8:	4611      	mov	r1, r2
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 f8ae 	bl	8000a5c <convertReg2StandardCANid>
 8000900:	4603      	mov	r3, r0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
	}

	tempCanMsg.frame.dlc   = rxReg.RXBnDLC;
 8000904:	7d3b      	ldrb	r3, [r7, #20]
 8000906:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tempCanMsg.frame.data[0] = rxReg.RXBnD0;
 800090a:	7d7b      	ldrb	r3, [r7, #21]
 800090c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tempCanMsg.frame.data[1] = rxReg.RXBnD1;
 8000910:	7dbb      	ldrb	r3, [r7, #22]
 8000912:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tempCanMsg.frame.data[2] = rxReg.RXBnD2;
 8000916:	7dfb      	ldrb	r3, [r7, #23]
 8000918:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tempCanMsg.frame.data[3] = rxReg.RXBnD3;
 800091c:	7e3b      	ldrb	r3, [r7, #24]
 800091e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	tempCanMsg.frame.data[4] = rxReg.RXBnD4;
 8000922:	7e7b      	ldrb	r3, [r7, #25]
 8000924:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	tempCanMsg.frame.data[5] = rxReg.RXBnD5;
 8000928:	7ebb      	ldrb	r3, [r7, #26]
 800092a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	tempCanMsg.frame.data[6] = rxReg.RXBnD6;
 800092e:	7efb      	ldrb	r3, [r7, #27]
 8000930:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	tempCanMsg.frame.data[7] = rxReg.RXBnD7;
 8000934:	7f3b      	ldrb	r3, [r7, #28]
 8000936:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	// Pack into iCommsMessage_t
	rxMsg->standardMessageID = tempCanMsg.frame.id;
 800093a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800093c:	b29a      	uxth	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	801a      	strh	r2, [r3, #0]
	rxMsg->dataLength = tempCanMsg.frame.dlc;
 8000942:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	709a      	strb	r2, [r3, #2]

	for(uint8_t i=0; i<tempCanMsg.frame.dlc; i++)
 800094a:	2300      	movs	r3, #0
 800094c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000950:	e010      	b.n	8000974 <CANSPI_Receive+0x124>
	{
		rxMsg->data[i] = tempCanMsg.frame.data[i];
 8000952:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8000956:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800095a:	3238      	adds	r2, #56	; 0x38
 800095c:	443a      	add	r2, r7
 800095e:	f812 1c0f 	ldrb.w	r1, [r2, #-15]
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	460a      	mov	r2, r1
 8000968:	70da      	strb	r2, [r3, #3]
	for(uint8_t i=0; i<tempCanMsg.frame.dlc; i++)
 800096a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800096e:	3301      	adds	r3, #1
 8000970:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000974:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000978:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800097c:	429a      	cmp	r2, r3
 800097e:	d3e8      	bcc.n	8000952 <CANSPI_Receive+0x102>
	}
	returnValue = 1;
 8000980:	2301      	movs	r3, #1
 8000982:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}

	return (returnValue);
 8000986:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800098a:	4618      	mov	r0, r3
 800098c:	3738      	adds	r7, #56	; 0x38
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <CANSPI_messagesInBuffer>:

/* 수신 버퍼에 메시지가 있는지 체크 */
uint8_t CANSPI_messagesInBuffer(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
  uint8_t messageCount = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	71fb      	strb	r3, [r7, #7]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 800099e:	f000 fb51 	bl	8001044 <MCP2515_ReadStatus>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <CANSPI_messagesInBuffer+0x48>)
 80009a8:	701a      	strb	r2, [r3, #0]

  if(ctrlStatus.RX0IF != 0)
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <CANSPI_messagesInBuffer+0x48>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d002      	beq.n	80009be <CANSPI_messagesInBuffer+0x2a>
  {
    messageCount++;
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	3301      	adds	r3, #1
 80009bc:	71fb      	strb	r3, [r7, #7]
  }

  if(ctrlStatus.RX1IF != 0)
 80009be:	4b07      	ldr	r3, [pc, #28]	; (80009dc <CANSPI_messagesInBuffer+0x48>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	b2db      	uxtb	r3, r3
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d002      	beq.n	80009d2 <CANSPI_messagesInBuffer+0x3e>
  {
    messageCount++;
 80009cc:	79fb      	ldrb	r3, [r7, #7]
 80009ce:	3301      	adds	r3, #1
 80009d0:	71fb      	strb	r3, [r7, #7]
  }

  return (messageCount);
 80009d2:	79fb      	ldrb	r3, [r7, #7]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	2000008c 	.word	0x2000008c

080009e0 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80009e0:	b490      	push	{r4, r7}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4604      	mov	r4, r0
 80009e8:	4608      	mov	r0, r1
 80009ea:	4611      	mov	r1, r2
 80009ec:	461a      	mov	r2, r3
 80009ee:	4623      	mov	r3, r4
 80009f0:	71fb      	strb	r3, [r7, #7]
 80009f2:	4603      	mov	r3, r0
 80009f4:	71bb      	strb	r3, [r7, #6]
 80009f6:	460b      	mov	r3, r1
 80009f8:	717b      	strb	r3, [r7, #5]
 80009fa:	4613      	mov	r3, r2
 80009fc:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8000a06:	793b      	ldrb	r3, [r7, #4]
 8000a08:	f003 0303 	and.w	r3, r3, #3
 8000a0c:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 8000a0e:	793b      	ldrb	r3, [r7, #4]
 8000a10:	095b      	lsrs	r3, r3, #5
 8000a12:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8000a14:	797b      	ldrb	r3, [r7, #5]
 8000a16:	00db      	lsls	r3, r3, #3
 8000a18:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4413      	add	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8000a28:	7bfb      	ldrb	r3, [r7, #15]
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	021b      	lsls	r3, r3, #8
 8000a42:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8000a44:	79bb      	ldrb	r3, [r7, #6]
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4413      	add	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000a50:	697b      	ldr	r3, [r7, #20]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc90      	pop	{r4, r7}
 8000a5a:	4770      	bx	lr

08000a5c <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	460a      	mov	r2, r1
 8000a66:	71fb      	strb	r3, [r7, #7]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	00db      	lsls	r3, r3, #3
 8000a74:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8000a76:	79bb      	ldrb	r3, [r7, #6]
 8000a78:	095b      	lsrs	r3, r3, #5
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	4413      	add	r3, r2
 8000a82:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 8000a88:	68fb      	ldr	r3, [r7, #12]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b087      	sub	sp, #28
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	607a      	str	r2, [r7, #4]
 8000aa2:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000aa8:	7afb      	ldrb	r3, [r7, #11]
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	d12e      	bne.n	8000b0c <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	0a1b      	lsrs	r3, r3, #8
 8000aba:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	0a1b      	lsrs	r3, r3, #8
 8000ac8:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	f003 0303 	and.w	r3, r3, #3
 8000ad2:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	f023 031f 	bic.w	r3, r3, #31
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	7dfb      	ldrb	r3, [r7, #23]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8000aea:	7dfb      	ldrb	r3, [r7, #23]
 8000aec:	3308      	adds	r3, #8
 8000aee:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 8000af0:	7dfb      	ldrb	r3, [r7, #23]
 8000af2:	f023 0314 	bic.w	r3, r3, #20
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8000b0a:	e013      	b.n	8000b34 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	015b      	lsls	r3, r3, #5
 8000b1c:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	701a      	strb	r2, [r3, #0]
}
 8000b34:	bf00      	nop
 8000b36:	371c      	adds	r7, #28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <IComms_Init>:
PRIVATE void ICommsQueue_enqueue( ICommsQueue_t * q, iCommsMessage_t value );
PRIVATE iCommsMessage_t ICommsQueue_dequeue( ICommsQueue_t * q);


PUBLIC result_t IComms_Init()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
	result_t ret = ICOMMS_DRIVER_INITIALIZE();
 8000b46:	f7ff fd35 	bl	80005b4 <CANSPI_Initialize>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
	ICommsQueue_init(&ICommsRxQueue);
 8000b4e:	4804      	ldr	r0, [pc, #16]	; (8000b60 <IComms_Init+0x20>)
 8000b50:	f000 f894 	bl	8000c7c <ICommsQueue_init>
	return ret;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000094 	.word	0x20000094

08000b64 <IComms_Transmit>:

PUBLIC result_t IComms_Transmit(iCommsMessage_t * txMsg)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	result_t ret = ICOMMS_DRIVER_TRANSMIT_MESSAGE(txMsg);
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f7ff fdd1 	bl	8000714 <CANSPI_Transmit>
 8000b72:	4603      	mov	r3, r0
 8000b74:	73fb      	strb	r3, [r7, #15]
	return ret;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <IComms_ReceiveNextMessage>:
PUBLIC result_t IComms_ReceiveNextMessage(iCommsMessage_t * rxMsg)
{
 8000b80:	b590      	push	{r4, r7, lr}
 8000b82:	b087      	sub	sp, #28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6178      	str	r0, [r7, #20]
	// if nothing to dequeue return fail
	if(ICommsRxQueue.count == 0) return RESULT_FAIL;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <IComms_ReceiveNextMessage+0x3c>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <IComms_ReceiveNextMessage+0x14>
 8000b90:	2300      	movs	r3, #0
 8000b92:	e00e      	b.n	8000bb2 <IComms_ReceiveNextMessage+0x32>
	// dequeue return ok
	*rxMsg = ICommsQueue_dequeue(&ICommsRxQueue);
 8000b94:	697c      	ldr	r4, [r7, #20]
 8000b96:	463b      	mov	r3, r7
 8000b98:	4908      	ldr	r1, [pc, #32]	; (8000bbc <IComms_ReceiveNextMessage+0x3c>)
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f8d0 	bl	8000d40 <ICommsQueue_dequeue>
 8000ba0:	4622      	mov	r2, r4
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	6818      	ldr	r0, [r3, #0]
 8000ba6:	6859      	ldr	r1, [r3, #4]
 8000ba8:	689b      	ldr	r3, [r3, #8]
 8000baa:	6010      	str	r0, [r2, #0]
 8000bac:	6051      	str	r1, [r2, #4]
 8000bae:	6093      	str	r3, [r2, #8]
	return RESULT_OK;
 8000bb0:	2301      	movs	r3, #1
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd90      	pop	{r4, r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000094 	.word	0x20000094

08000bc0 <IComms_HasRxMessage>:


PUBLIC uint8_t IComms_HasRxMessage()
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
	if(ICommsRxQueue.count != 0) return 1;
 8000bc4:	4b05      	ldr	r3, [pc, #20]	; (8000bdc <IComms_HasRxMessage+0x1c>)
 8000bc6:	689b      	ldr	r3, [r3, #8]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <IComms_HasRxMessage+0x10>
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e000      	b.n	8000bd2 <IComms_HasRxMessage+0x12>
	return 0;
 8000bd0:	2300      	movs	r3, #0
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	20000094 	.word	0x20000094

08000be0 <IComms_Update>:

// Since we are currently polling, the update function needs to be called.
// Alternatively this can be put into an interrupt
PUBLIC void IComms_Update()
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
	while (ICOMMS_DRIVER_MESSAGE_AVAILABLE() != 0)
 8000be6:	e032      	b.n	8000c4e <IComms_Update+0x6e>
	{
		iCommsMessage_t rxMsg;
		result_t ret = ICOMMS_DRIVER_RECEIVE_MESSAGE(&rxMsg);
 8000be8:	463b      	mov	r3, r7
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff fe30 	bl	8000850 <CANSPI_Receive>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	73bb      	strb	r3, [r7, #14]
		if(ret == RESULT_FAIL)
 8000bf4:	7bbb      	ldrb	r3, [r7, #14]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d103      	bne.n	8000c02 <IComms_Update+0x22>
		{
			DebugPrint("#ICM: FAILED TO RETRIEVE ICOMMS MESSAGE FROM DRIVER");
 8000bfa:	481a      	ldr	r0, [pc, #104]	; (8000c64 <IComms_Update+0x84>)
 8000bfc:	f000 faa8 	bl	8001150 <SerialPrintln>
 8000c00:	e025      	b.n	8000c4e <IComms_Update+0x6e>
		}
		else{
			DebugPrint("#ICM: MESSAGE RECIEVED, ADDING TO QUEUE");
 8000c02:	4819      	ldr	r0, [pc, #100]	; (8000c68 <IComms_Update+0x88>)
 8000c04:	f000 faa4 	bl	8001150 <SerialPrintln>
			// enqueue
			ICommsQueue_enqueue(&ICommsRxQueue, rxMsg);
 8000c08:	463b      	mov	r3, r7
 8000c0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c0c:	4817      	ldr	r0, [pc, #92]	; (8000c6c <IComms_Update+0x8c>)
 8000c0e:	f000 f848 	bl	8000ca2 <ICommsQueue_enqueue>
			DebugPrint("#ICM: Standard ID: %d", rxMsg.standardMessageID);
 8000c12:	883b      	ldrh	r3, [r7, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	4816      	ldr	r0, [pc, #88]	; (8000c70 <IComms_Update+0x90>)
 8000c18:	f000 fa9a 	bl	8001150 <SerialPrintln>
			DebugPrint("#ICM: DLC: %d", rxMsg.dataLength);
 8000c1c:	78bb      	ldrb	r3, [r7, #2]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4814      	ldr	r0, [pc, #80]	; (8000c74 <IComms_Update+0x94>)
 8000c22:	f000 fa95 	bl	8001150 <SerialPrintln>
			for(uint8_t i=0; i<rxMsg.dataLength; i++) DebugPrint("#ICM: Data[%d]: %d", i, rxMsg.data[i]);
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	e00c      	b.n	8000c46 <IComms_Update+0x66>
 8000c2c:	7bf9      	ldrb	r1, [r7, #15]
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	3310      	adds	r3, #16
 8000c32:	443b      	add	r3, r7
 8000c34:	f813 3c0d 	ldrb.w	r3, [r3, #-13]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	480f      	ldr	r0, [pc, #60]	; (8000c78 <IComms_Update+0x98>)
 8000c3c:	f000 fa88 	bl	8001150 <SerialPrintln>
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	3301      	adds	r3, #1
 8000c44:	73fb      	strb	r3, [r7, #15]
 8000c46:	78bb      	ldrb	r3, [r7, #2]
 8000c48:	7bfa      	ldrb	r2, [r7, #15]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d3ee      	bcc.n	8000c2c <IComms_Update+0x4c>
	while (ICOMMS_DRIVER_MESSAGE_AVAILABLE() != 0)
 8000c4e:	f7ff fea1 	bl	8000994 <CANSPI_messagesInBuffer>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1c7      	bne.n	8000be8 <IComms_Update+0x8>
		}


	}
}
 8000c58:	bf00      	nop
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	080046a8 	.word	0x080046a8
 8000c68:	080046dc 	.word	0x080046dc
 8000c6c:	20000094 	.word	0x20000094
 8000c70:	08004704 	.word	0x08004704
 8000c74:	0800471c 	.word	0x0800471c
 8000c78:	0800472c 	.word	0x0800472c

08000c7c <ICommsQueue_init>:
 * 		Circular queue for icomms input
 *
 **********************************************************************************/

PRIVATE void ICommsQueue_init( ICommsQueue_t * q )
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
	q->head = 0;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
	q->count = 0;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
	q->tail = 0;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	605a      	str	r2, [r3, #4]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <ICommsQueue_enqueue>:

PRIVATE void ICommsQueue_enqueue( ICommsQueue_t * q, iCommsMessage_t value )
{
 8000ca2:	b490      	push	{r4, r7}
 8000ca4:	b086      	sub	sp, #24
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	60f8      	str	r0, [r7, #12]
 8000caa:	4638      	mov	r0, r7
 8000cac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(q->count < QUEUE_MAX)
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	689b      	ldr	r3, [r3, #8]
 8000cb4:	2b1f      	cmp	r3, #31
 8000cb6:	d83d      	bhi.n	8000d34 <ICommsQueue_enqueue+0x92>
	{
		// copy message struct into the queue
		q->data[q->tail].standardMessageID = value.standardMessageID;
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	8838      	ldrh	r0, [r7, #0]
 8000cbe:	68f9      	ldr	r1, [r7, #12]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	440b      	add	r3, r1
 8000cca:	330c      	adds	r3, #12
 8000ccc:	4602      	mov	r2, r0
 8000cce:	801a      	strh	r2, [r3, #0]
		q->data[q->tail].dataLength = value.dataLength;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	78b8      	ldrb	r0, [r7, #2]
 8000cd6:	68f9      	ldr	r1, [r7, #12]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	330e      	adds	r3, #14
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	701a      	strb	r2, [r3, #0]

		for(uint8_t i; i < value.dataLength; i++)
 8000ce8:	e014      	b.n	8000d14 <ICommsQueue_enqueue+0x72>
			q->data[q->tail].data[i] = value.data[i];
 8000cea:	7dfb      	ldrb	r3, [r7, #23]
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	6852      	ldr	r2, [r2, #4]
 8000cf0:	7df9      	ldrb	r1, [r7, #23]
 8000cf2:	3318      	adds	r3, #24
 8000cf4:	443b      	add	r3, r7
 8000cf6:	f813 4c15 	ldrb.w	r4, [r3, #-21]
 8000cfa:	68f8      	ldr	r0, [r7, #12]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4413      	add	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4403      	add	r3, r0
 8000d06:	440b      	add	r3, r1
 8000d08:	330f      	adds	r3, #15
 8000d0a:	4622      	mov	r2, r4
 8000d0c:	701a      	strb	r2, [r3, #0]
		for(uint8_t i; i < value.dataLength; i++)
 8000d0e:	7dfb      	ldrb	r3, [r7, #23]
 8000d10:	3301      	adds	r3, #1
 8000d12:	75fb      	strb	r3, [r7, #23]
 8000d14:	78bb      	ldrb	r3, [r7, #2]
 8000d16:	7dfa      	ldrb	r2, [r7, #23]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d3e6      	bcc.n	8000cea <ICommsQueue_enqueue+0x48>

		// increment count
		q->count ++;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	1c5a      	adds	r2, r3, #1
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	609a      	str	r2, [r3, #8]
		q->tail = (q->tail + 1) % QUEUE_MAX; // circular
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	605a      	str	r2, [r3, #4]
	}
}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc90      	pop	{r4, r7}
 8000d3c:	4770      	bx	lr
	...

08000d40 <ICommsQueue_dequeue>:

PRIVATE iCommsMessage_t ICommsQueue_dequeue( ICommsQueue_t * q)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b089      	sub	sp, #36	; 0x24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
	if(q->count > 0)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d024      	beq.n	8000d9c <ICommsQueue_dequeue+0x5c>
	{
		iCommsMessage_t value;

		value = q->data[q->head];
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	681a      	ldr	r2, [r3, #0]
 8000d56:	6839      	ldr	r1, [r7, #0]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4413      	add	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	440b      	add	r3, r1
 8000d62:	f103 0208 	add.w	r2, r3, #8
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	3204      	adds	r2, #4
 8000d6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}


		q->count --;
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	1e5a      	subs	r2, r3, #1
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	609a      	str	r2, [r3, #8]
		q->head = (q->head + 1) % QUEUE_MAX;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	f003 021f 	and.w	r2, r3, #31
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	601a      	str	r2, [r3, #0]
		return value;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	461c      	mov	r4, r3
 8000d8e:	f107 0308 	add.w	r3, r7, #8
 8000d92:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000d94:	6020      	str	r0, [r4, #0]
 8000d96:	6061      	str	r1, [r4, #4]
 8000d98:	60a2      	str	r2, [r4, #8]
	}
	DebugPrint("ICM: Error dequeuing");
	return (iCommsMessage_t){0xFFFF,0,0};// garbage value, should never be returned
}
 8000d9a:	e00c      	b.n	8000db6 <ICommsQueue_dequeue+0x76>
	DebugPrint("ICM: Error dequeuing");
 8000d9c:	4808      	ldr	r0, [pc, #32]	; (8000dc0 <ICommsQueue_dequeue+0x80>)
 8000d9e:	f000 f9d7 	bl	8001150 <SerialPrintln>
	return (iCommsMessage_t){0xFFFF,0,0};// garbage value, should never be returned
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	461a      	mov	r2, r3
 8000da6:	2300      	movs	r3, #0
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	6053      	str	r3, [r2, #4]
 8000dac:	6093      	str	r3, [r2, #8]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db4:	801a      	strh	r2, [r3, #0]
}
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	3724      	adds	r7, #36	; 0x24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd90      	pop	{r4, r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	08004740 	.word	0x08004740

08000dc4 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 8000dca:	2201      	movs	r2, #1
 8000dcc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dd0:	480b      	ldr	r0, [pc, #44]	; (8000e00 <MCP2515_Initialize+0x3c>)
 8000dd2:	f001 f843 	bl	8001e5c <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8000dd6:	230a      	movs	r3, #10
 8000dd8:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8000dda:	480a      	ldr	r0, [pc, #40]	; (8000e04 <MCP2515_Initialize+0x40>)
 8000ddc:	f002 fab8 	bl	8003350 <HAL_SPI_GetState>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d101      	bne.n	8000dea <MCP2515_Initialize+0x26>
      return true;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e006      	b.n	8000df8 <MCP2515_Initialize+0x34>

    loop--;
 8000dea:	79fb      	ldrb	r3, [r7, #7]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d1f1      	bne.n	8000dda <MCP2515_Initialize+0x16>

  return false;
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40020000 	.word	0x40020000
 8000e04:	200002a0 	.word	0x200002a0

08000e08 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	200f      	movs	r0, #15
 8000e12:	f000 f87d 	bl	8000f10 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000e16:	230a      	movs	r3, #10
 8000e18:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8000e1a:	200e      	movs	r0, #14
 8000e1c:	f000 f830 	bl	8000e80 <MCP2515_ReadByte>
 8000e20:	4603      	mov	r3, r0
 8000e22:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000e26:	2b80      	cmp	r3, #128	; 0x80
 8000e28:	d101      	bne.n	8000e2e <MCP2515_SetConfigMode+0x26>
      return true;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e006      	b.n	8000e3c <MCP2515_SetConfigMode+0x34>

    loop--;
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	3b01      	subs	r3, #1
 8000e32:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d1ef      	bne.n	8000e1a <MCP2515_SetConfigMode+0x12>

  return false;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	200f      	movs	r0, #15
 8000e4e:	f000 f85f 	bl	8000f10 <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000e52:	230a      	movs	r3, #10
 8000e54:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000e56:	200e      	movs	r0, #14
 8000e58:	f000 f812 	bl	8000e80 <MCP2515_ReadByte>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d101      	bne.n	8000e6a <MCP2515_SetNormalMode+0x26>
      return true;
 8000e66:	2301      	movs	r3, #1
 8000e68:	e006      	b.n	8000e78 <MCP2515_SetNormalMode+0x34>

    loop--;
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1ef      	bne.n	8000e56 <MCP2515_SetNormalMode+0x12>

  return false;
 8000e76:	2300      	movs	r3, #0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e90:	480c      	ldr	r0, [pc, #48]	; (8000ec4 <MCP2515_ReadByte+0x44>)
 8000e92:	f000 ffe3 	bl	8001e5c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 8000e96:	2003      	movs	r0, #3
 8000e98:	f000 f910 	bl	80010bc <SPI_Tx>
  SPI_Tx(address);
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f000 f90c 	bl	80010bc <SPI_Tx>
  retVal = SPI_Rx();
 8000ea4:	f000 f930 	bl	8001108 <SPI_Rx>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8000eac:	2201      	movs	r2, #1
 8000eae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eb2:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MCP2515_ReadByte+0x44>)
 8000eb4:	f000 ffd2 	bl	8001e5c <HAL_GPIO_WritePin>

  return retVal;
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ede:	480b      	ldr	r0, [pc, #44]	; (8000f0c <MCP2515_ReadRxSequence+0x44>)
 8000ee0:	f000 ffbc 	bl	8001e5c <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f000 f8e8 	bl	80010bc <SPI_Tx>
  SPI_RxBuffer(data, length);
 8000eec:	79bb      	ldrb	r3, [r7, #6]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	6838      	ldr	r0, [r7, #0]
 8000ef2:	f000 f919 	bl	8001128 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000efc:	4803      	ldr	r0, [pc, #12]	; (8000f0c <MCP2515_ReadRxSequence+0x44>)
 8000efe:	f000 ffad 	bl	8001e5c <HAL_GPIO_WritePin>
}
 8000f02:	bf00      	nop
 8000f04:	3708      	adds	r7, #8
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40020000 	.word	0x40020000

08000f10 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	460a      	mov	r2, r1
 8000f1a:	71fb      	strb	r3, [r7, #7]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000f20:	2200      	movs	r2, #0
 8000f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f26:	480c      	ldr	r0, [pc, #48]	; (8000f58 <MCP2515_WriteByte+0x48>)
 8000f28:	f000 ff98 	bl	8001e5c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000f2c:	2002      	movs	r0, #2
 8000f2e:	f000 f8c5 	bl	80010bc <SPI_Tx>
  SPI_Tx(address);
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f000 f8c1 	bl	80010bc <SPI_Tx>
  SPI_Tx(data);
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 f8bd 	bl	80010bc <SPI_Tx>

  MCP2515_CS_HIGH();
 8000f42:	2201      	movs	r2, #1
 8000f44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <MCP2515_WriteByte+0x48>)
 8000f4a:	f000 ff87 	bl	8001e5c <HAL_GPIO_WritePin>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40020000 	.word	0x40020000

08000f5c <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	603a      	str	r2, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f72:	480f      	ldr	r0, [pc, #60]	; (8000fb0 <MCP2515_WriteByteSequence+0x54>)
 8000f74:	f000 ff72 	bl	8001e5c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f000 f89f 	bl	80010bc <SPI_Tx>
  SPI_Tx(startAddress);
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f89b 	bl	80010bc <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000f86:	79ba      	ldrb	r2, [r7, #6]
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	3301      	adds	r3, #1
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	4619      	mov	r1, r3
 8000f94:	6838      	ldr	r0, [r7, #0]
 8000f96:	f000 f8a3 	bl	80010e0 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <MCP2515_WriteByteSequence+0x54>)
 8000fa2:	f000 ff5b 	bl	8001e5c <HAL_GPIO_WritePin>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020000 	.word	0x40020000

08000fb4 <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fcc:	480e      	ldr	r0, [pc, #56]	; (8001008 <MCP2515_LoadTxSequence+0x54>)
 8000fce:	f000 ff45 	bl	8001e5c <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 f871 	bl	80010bc <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 8000fda:	2104      	movs	r1, #4
 8000fdc:	68b8      	ldr	r0, [r7, #8]
 8000fde:	f000 f87f 	bl	80010e0 <SPI_TxBuffer>
  SPI_Tx(dlc);
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f869 	bl	80010bc <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8000fea:	7bbb      	ldrb	r3, [r7, #14]
 8000fec:	4619      	mov	r1, r3
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f000 f876 	bl	80010e0 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ffa:	4803      	ldr	r0, [pc, #12]	; (8001008 <MCP2515_LoadTxSequence+0x54>)
 8000ffc:	f000 ff2e 	bl	8001e5c <HAL_GPIO_WritePin>
}
 8001000:	bf00      	nop
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40020000 	.word	0x40020000

0800100c <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101c:	4808      	ldr	r0, [pc, #32]	; (8001040 <MCP2515_RequestToSend+0x34>)
 800101e:	f000 ff1d 	bl	8001e5c <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4618      	mov	r0, r3
 8001026:	f000 f849 	bl	80010bc <SPI_Tx>

  MCP2515_CS_HIGH();
 800102a:	2201      	movs	r2, #1
 800102c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001030:	4803      	ldr	r0, [pc, #12]	; (8001040 <MCP2515_RequestToSend+0x34>)
 8001032:	f000 ff13 	bl	8001e5c <HAL_GPIO_WritePin>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020000 	.word	0x40020000

08001044 <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 800104a:	2200      	movs	r2, #0
 800104c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001050:	480a      	ldr	r0, [pc, #40]	; (800107c <MCP2515_ReadStatus+0x38>)
 8001052:	f000 ff03 	bl	8001e5c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 8001056:	20a0      	movs	r0, #160	; 0xa0
 8001058:	f000 f830 	bl	80010bc <SPI_Tx>
  retVal = SPI_Rx();
 800105c:	f000 f854 	bl	8001108 <SPI_Rx>
 8001060:	4603      	mov	r3, r0
 8001062:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 7100 	mov.w	r1, #512	; 0x200
 800106a:	4804      	ldr	r0, [pc, #16]	; (800107c <MCP2515_ReadStatus+0x38>)
 800106c:	f000 fef6 	bl	8001e5c <HAL_GPIO_WritePin>

  return retVal;
 8001070:	79fb      	ldrb	r3, [r7, #7]
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40020000 	.word	0x40020000

08001080 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108c:	480a      	ldr	r0, [pc, #40]	; (80010b8 <MCP2515_GetRxStatus+0x38>)
 800108e:	f000 fee5 	bl	8001e5c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 8001092:	20b0      	movs	r0, #176	; 0xb0
 8001094:	f000 f812 	bl	80010bc <SPI_Tx>
  retVal = SPI_Rx();
 8001098:	f000 f836 	bl	8001108 <SPI_Rx>
 800109c:	4603      	mov	r3, r0
 800109e:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <MCP2515_GetRxStatus+0x38>)
 80010a8:	f000 fed8 	bl	8001e5c <HAL_GPIO_WritePin>

  return retVal;
 80010ac:	79fb      	ldrb	r3, [r7, #7]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40020000 	.word	0x40020000

080010bc <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 80010c6:	1df9      	adds	r1, r7, #7
 80010c8:	230a      	movs	r3, #10
 80010ca:	2201      	movs	r2, #1
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <SPI_Tx+0x20>)
 80010ce:	f001 fd50 	bl	8002b72 <HAL_SPI_Transmit>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200002a0 	.word	0x200002a0

080010e0 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	230a      	movs	r3, #10
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <SPI_TxBuffer+0x24>)
 80010f6:	f001 fd3c 	bl	8002b72 <HAL_SPI_Transmit>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	200002a0 	.word	0x200002a0

08001108 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800110e:	1df9      	adds	r1, r7, #7
 8001110:	230a      	movs	r3, #10
 8001112:	2201      	movs	r2, #1
 8001114:	4803      	ldr	r0, [pc, #12]	; (8001124 <SPI_Rx+0x1c>)
 8001116:	f001 fe68 	bl	8002dea <HAL_SPI_Receive>
  return retVal;
 800111a:	79fb      	ldrb	r3, [r7, #7]
}
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200002a0 	.word	0x200002a0

08001128 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	460b      	mov	r3, r1
 8001132:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001134:	78fb      	ldrb	r3, [r7, #3]
 8001136:	b29a      	uxth	r2, r3
 8001138:	230a      	movs	r3, #10
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <SPI_RxBuffer+0x24>)
 800113e:	f001 fe54 	bl	8002dea <HAL_SPI_Receive>
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	200002a0 	.word	0x200002a0

08001150 <SerialPrintln>:
	HAL_UART_Transmit(&huart2, (uint8_t*)messageBuf, len, HAL_MAX_DELAY);
	va_end(args);

}
PUBLIC void SerialPrintln(const char * message, ...)
{
 8001150:	b40f      	push	{r0, r1, r2, r3}
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, message);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	603b      	str	r3, [r7, #0]
	length_t len = vsprintf(messageBuf, message, args);
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	6939      	ldr	r1, [r7, #16]
 8001162:	480f      	ldr	r0, [pc, #60]	; (80011a0 <SerialPrintln+0x50>)
 8001164:	f002 fe3c 	bl	8003de0 <vsiprintf>
 8001168:	4603      	mov	r3, r0
 800116a:	80fb      	strh	r3, [r7, #6]
	messageBuf[len] = '\n';
 800116c:	88fb      	ldrh	r3, [r7, #6]
 800116e:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <SerialPrintln+0x50>)
 8001170:	210a      	movs	r1, #10
 8001172:	54d1      	strb	r1, [r2, r3]
	messageBuf[len+1] = '\r';
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	3301      	adds	r3, #1
 8001178:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <SerialPrintln+0x50>)
 800117a:	210d      	movs	r1, #13
 800117c:	54d1      	strb	r1, [r2, r3]
	HAL_UART_Transmit(&huart2, (uint8_t*)messageBuf, len+2, HAL_MAX_DELAY);
 800117e:	88fb      	ldrh	r3, [r7, #6]
 8001180:	3302      	adds	r3, #2
 8001182:	b29a      	uxth	r2, r3
 8001184:	f04f 33ff 	mov.w	r3, #4294967295
 8001188:	4905      	ldr	r1, [pc, #20]	; (80011a0 <SerialPrintln+0x50>)
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <SerialPrintln+0x54>)
 800118c:	f002 fa6b 	bl	8003666 <HAL_UART_Transmit>
	va_end(args);
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800119a:	b004      	add	sp, #16
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	20000220 	.word	0x20000220
 80011a4:	200002f8 	.word	0x200002f8

080011a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ae:	f000 fb45 	bl	800183c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b2:	f000 f86d 	bl	8001290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011b6:	f000 f939 	bl	800142c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011ba:	f000 f90d 	bl	80013d8 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80011be:	f000 f8d5 	bl	800136c <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  IComms_Init();
 80011c2:	f7ff fcbd 	bl	8000b40 <IComms_Init>
  uint8_t testTxCounter = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	77fb      	strb	r3, [r7, #31]
  while (1)
  {
	  HAL_Delay(1000);
 80011ca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ce:	f000 fba7 	bl	8001920 <HAL_Delay>
	  DebugPrint("test");
 80011d2:	4829      	ldr	r0, [pc, #164]	; (8001278 <main+0xd0>)
 80011d4:	f7ff ffbc 	bl	8001150 <SerialPrintln>
	  iCommsMessage_t txMsg;
	txMsg.standardMessageID = CAN_THROTTLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	823b      	strh	r3, [r7, #16]
	txMsg.dataLength = 4;
 80011dc:	2304      	movs	r3, #4
 80011de:	74bb      	strb	r3, [r7, #18]
	txMsg.data[0] = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	74fb      	strb	r3, [r7, #19]
	txMsg.data[1] = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	753b      	strb	r3, [r7, #20]
	txMsg.data[2] = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	757b      	strb	r3, [r7, #21]
	txMsg.data[3] = 4;
 80011ec:	2304      	movs	r3, #4
 80011ee:	75bb      	strb	r3, [r7, #22]
	/*txMsg.data[4] = 5;
	txMsg.data[5] = 6;
	txMsg.data[6] = 7;
	txMsg.data[7] = 8;*/
	testTxCounter++;
 80011f0:	7ffb      	ldrb	r3, [r7, #31]
 80011f2:	3301      	adds	r3, #1
 80011f4:	77fb      	strb	r3, [r7, #31]
	if(testTxCounter == 10)
 80011f6:	7ffb      	ldrb	r3, [r7, #31]
 80011f8:	2b0a      	cmp	r3, #10
 80011fa:	d109      	bne.n	8001210 <main+0x68>
	{
		DebugPrint("Sending!");
 80011fc:	481f      	ldr	r0, [pc, #124]	; (800127c <main+0xd4>)
 80011fe:	f7ff ffa7 	bl	8001150 <SerialPrintln>
		IComms_Transmit(&txMsg);
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fcac 	bl	8000b64 <IComms_Transmit>
		testTxCounter =0;
 800120c:	2300      	movs	r3, #0
 800120e:	77fb      	strb	r3, [r7, #31]
	}

	IComms_Update();
 8001210:	f7ff fce6 	bl	8000be0 <IComms_Update>
	while(IComms_HasRxMessage())
 8001214:	e02a      	b.n	800126c <main+0xc4>
	{
		iCommsMessage_t rxMsg;
		result_t ret = IComms_ReceiveNextMessage(&rxMsg);
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fcb1 	bl	8000b80 <IComms_ReceiveNextMessage>
 800121e:	4603      	mov	r3, r0
 8001220:	777b      	strb	r3, [r7, #29]
		if(ret == RESULT_FAIL)
 8001222:	7f7b      	ldrb	r3, [r7, #29]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d103      	bne.n	8001230 <main+0x88>
		{
			DebugPrint("#ICT: Error Retrieving next message");
 8001228:	4815      	ldr	r0, [pc, #84]	; (8001280 <main+0xd8>)
 800122a:	f7ff ff91 	bl	8001150 <SerialPrintln>
 800122e:	e01d      	b.n	800126c <main+0xc4>
		}
		else{
			DebugPrint("Standard ID: %d", rxMsg.standardMessageID);
 8001230:	88bb      	ldrh	r3, [r7, #4]
 8001232:	4619      	mov	r1, r3
 8001234:	4813      	ldr	r0, [pc, #76]	; (8001284 <main+0xdc>)
 8001236:	f7ff ff8b 	bl	8001150 <SerialPrintln>
			DebugPrint("DLC: %d", rxMsg.dataLength);
 800123a:	79bb      	ldrb	r3, [r7, #6]
 800123c:	4619      	mov	r1, r3
 800123e:	4812      	ldr	r0, [pc, #72]	; (8001288 <main+0xe0>)
 8001240:	f7ff ff86 	bl	8001150 <SerialPrintln>
			for(uint8_t i=0; i<rxMsg.dataLength; i++) DebugPrint("Data[%d]: %d", i, rxMsg.data[i]);
 8001244:	2300      	movs	r3, #0
 8001246:	77bb      	strb	r3, [r7, #30]
 8001248:	e00c      	b.n	8001264 <main+0xbc>
 800124a:	7fb9      	ldrb	r1, [r7, #30]
 800124c:	7fbb      	ldrb	r3, [r7, #30]
 800124e:	3320      	adds	r3, #32
 8001250:	443b      	add	r3, r7
 8001252:	f813 3c19 	ldrb.w	r3, [r3, #-25]
 8001256:	461a      	mov	r2, r3
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <main+0xe4>)
 800125a:	f7ff ff79 	bl	8001150 <SerialPrintln>
 800125e:	7fbb      	ldrb	r3, [r7, #30]
 8001260:	3301      	adds	r3, #1
 8001262:	77bb      	strb	r3, [r7, #30]
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	7fba      	ldrb	r2, [r7, #30]
 8001268:	429a      	cmp	r2, r3
 800126a:	d3ee      	bcc.n	800124a <main+0xa2>
	while(IComms_HasRxMessage())
 800126c:	f7ff fca8 	bl	8000bc0 <IComms_HasRxMessage>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d1cf      	bne.n	8001216 <main+0x6e>
  {
 8001276:	e7a8      	b.n	80011ca <main+0x22>
 8001278:	08004758 	.word	0x08004758
 800127c:	08004760 	.word	0x08004760
 8001280:	0800476c 	.word	0x0800476c
 8001284:	08004790 	.word	0x08004790
 8001288:	080047a0 	.word	0x080047a0
 800128c:	080047a8 	.word	0x080047a8

08001290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b094      	sub	sp, #80	; 0x50
 8001294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	2234      	movs	r2, #52	; 0x34
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fd80 	bl	8003da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	4b2a      	ldr	r3, [pc, #168]	; (8001364 <SystemClock_Config+0xd4>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	4a29      	ldr	r2, [pc, #164]	; (8001364 <SystemClock_Config+0xd4>)
 80012be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c2:	6413      	str	r3, [r2, #64]	; 0x40
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <SystemClock_Config+0xd4>)
 80012c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012d0:	2300      	movs	r3, #0
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <SystemClock_Config+0xd8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012dc:	4a22      	ldr	r2, [pc, #136]	; (8001368 <SystemClock_Config+0xd8>)
 80012de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b20      	ldr	r3, [pc, #128]	; (8001368 <SystemClock_Config+0xd8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f0:	2302      	movs	r3, #2
 80012f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f4:	2301      	movs	r3, #1
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f8:	2310      	movs	r3, #16
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fc:	2302      	movs	r3, #2
 80012fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001300:	2300      	movs	r3, #0
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001304:	2310      	movs	r3, #16
 8001306:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001308:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800130c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800130e:	2304      	movs	r3, #4
 8001310:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001312:	2302      	movs	r3, #2
 8001314:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001316:	2302      	movs	r3, #2
 8001318:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4618      	mov	r0, r3
 8001320:	f001 f900 	bl	8002524 <HAL_RCC_OscConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800132a:	f000 f8fd 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132e:	230f      	movs	r3, #15
 8001330:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001332:	2302      	movs	r3, #2
 8001334:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800133a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	2102      	movs	r1, #2
 800134a:	4618      	mov	r0, r3
 800134c:	f000 fda0 	bl	8001e90 <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001356:	f000 f8e7 	bl	8001528 <Error_Handler>
  }
}
 800135a:	bf00      	nop
 800135c:	3750      	adds	r7, #80	; 0x50
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40007000 	.word	0x40007000

0800136c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_SPI2_Init+0x64>)
 8001372:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <MX_SPI2_Init+0x68>)
 8001374:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_SPI2_Init+0x64>)
 8001378:	f44f 7282 	mov.w	r2, #260	; 0x104
 800137c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_SPI2_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_SPI2_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_SPI2_Init+0x64>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_SPI2_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_SPI2_Init+0x64>)
 8001398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800139c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_SPI2_Init+0x64>)
 80013a0:	2228      	movs	r2, #40	; 0x28
 80013a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <MX_SPI2_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_SPI2_Init+0x64>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <MX_SPI2_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_SPI2_Init+0x64>)
 80013b8:	220a      	movs	r2, #10
 80013ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_SPI2_Init+0x64>)
 80013be:	f001 fb4f 	bl	8002a60 <HAL_SPI_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013c8:	f000 f8ae 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200002a0 	.word	0x200002a0
 80013d4:	40003800 	.word	0x40003800

080013d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <MX_USART2_UART_Init+0x50>)
 80013e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013f0:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013f6:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013fc:	4b09      	ldr	r3, [pc, #36]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 80013fe:	220c      	movs	r2, #12
 8001400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 800140a:	2200      	movs	r2, #0
 800140c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <MX_USART2_UART_Init+0x4c>)
 8001410:	f002 f8dc 	bl	80035cc <HAL_UART_Init>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800141a:	f000 f885 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	200002f8 	.word	0x200002f8
 8001428:	40004400 	.word	0x40004400

0800142c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08a      	sub	sp, #40	; 0x28
 8001430:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b35      	ldr	r3, [pc, #212]	; (800151c <MX_GPIO_Init+0xf0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a34      	ldr	r2, [pc, #208]	; (800151c <MX_GPIO_Init+0xf0>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b32      	ldr	r3, [pc, #200]	; (800151c <MX_GPIO_Init+0xf0>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b2e      	ldr	r3, [pc, #184]	; (800151c <MX_GPIO_Init+0xf0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a2d      	ldr	r2, [pc, #180]	; (800151c <MX_GPIO_Init+0xf0>)
 8001468:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b2b      	ldr	r3, [pc, #172]	; (800151c <MX_GPIO_Init+0xf0>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	4b27      	ldr	r3, [pc, #156]	; (800151c <MX_GPIO_Init+0xf0>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a26      	ldr	r2, [pc, #152]	; (800151c <MX_GPIO_Init+0xf0>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b24      	ldr	r3, [pc, #144]	; (800151c <MX_GPIO_Init+0xf0>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	607b      	str	r3, [r7, #4]
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <MX_GPIO_Init+0xf0>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a1f      	ldr	r2, [pc, #124]	; (800151c <MX_GPIO_Init+0xf0>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b1d      	ldr	r3, [pc, #116]	; (800151c <MX_GPIO_Init+0xf0>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_9, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 7118 	mov.w	r1, #608	; 0x260
 80014b8:	4819      	ldr	r0, [pc, #100]	; (8001520 <MX_GPIO_Init+0xf4>)
 80014ba:	f000 fccf 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4813      	ldr	r0, [pc, #76]	; (8001524 <MX_GPIO_Init+0xf8>)
 80014d6:	f000 fb2d 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAN_INT_Pin */
  GPIO_InitStruct.Pin = CAN_INT_Pin;
 80014da:	2301      	movs	r3, #1
 80014dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014de:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80014e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_INT_GPIO_Port, &GPIO_InitStruct);
 80014e8:	f107 0314 	add.w	r3, r7, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	480d      	ldr	r0, [pc, #52]	; (8001524 <MX_GPIO_Init+0xf8>)
 80014f0:	f000 fb20 	bl	8001b34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_9;
 80014f4:	f44f 7318 	mov.w	r3, #608	; 0x260
 80014f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014fa:	2301      	movs	r3, #1
 80014fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 0314 	add.w	r3, r7, #20
 800150a:	4619      	mov	r1, r3
 800150c:	4804      	ldr	r0, [pc, #16]	; (8001520 <MX_GPIO_Init+0xf4>)
 800150e:	f000 fb11 	bl	8001b34 <HAL_GPIO_Init>

}
 8001512:	bf00      	nop
 8001514:	3728      	adds	r7, #40	; 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020800 	.word	0x40020800

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	e7fe      	b.n	8001530 <Error_Handler+0x8>
	...

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_MspInit+0x4c>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	4a0f      	ldr	r2, [pc, #60]	; (8001580 <HAL_MspInit+0x4c>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001548:	6453      	str	r3, [r2, #68]	; 0x44
 800154a:	4b0d      	ldr	r3, [pc, #52]	; (8001580 <HAL_MspInit+0x4c>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <HAL_MspInit+0x4c>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a08      	ldr	r2, [pc, #32]	; (8001580 <HAL_MspInit+0x4c>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_MspInit+0x4c>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001572:	2007      	movs	r0, #7
 8001574:	f000 faaa 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40023800 	.word	0x40023800

08001584 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a30      	ldr	r2, [pc, #192]	; (8001664 <HAL_SPI_MspInit+0xe0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d15a      	bne.n	800165c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_SPI_MspInit+0xe4>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	4a2e      	ldr	r2, [pc, #184]	; (8001668 <HAL_SPI_MspInit+0xe4>)
 80015b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015b4:	6413      	str	r3, [r2, #64]	; 0x40
 80015b6:	4b2c      	ldr	r3, [pc, #176]	; (8001668 <HAL_SPI_MspInit+0xe4>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	4b28      	ldr	r3, [pc, #160]	; (8001668 <HAL_SPI_MspInit+0xe4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a27      	ldr	r2, [pc, #156]	; (8001668 <HAL_SPI_MspInit+0xe4>)
 80015cc:	f043 0304 	orr.w	r3, r3, #4
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <HAL_SPI_MspInit+0xe4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0304 	and.w	r3, r3, #4
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	60bb      	str	r3, [r7, #8]
 80015e2:	4b21      	ldr	r3, [pc, #132]	; (8001668 <HAL_SPI_MspInit+0xe4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a20      	ldr	r2, [pc, #128]	; (8001668 <HAL_SPI_MspInit+0xe4>)
 80015e8:	f043 0302 	orr.w	r3, r3, #2
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <HAL_SPI_MspInit+0xe4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	60bb      	str	r3, [r7, #8]
 80015f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015fa:	2302      	movs	r3, #2
 80015fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001606:	2303      	movs	r3, #3
 8001608:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800160a:	2307      	movs	r3, #7
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160e:	f107 0314 	add.w	r3, r7, #20
 8001612:	4619      	mov	r1, r3
 8001614:	4815      	ldr	r0, [pc, #84]	; (800166c <HAL_SPI_MspInit+0xe8>)
 8001616:	f000 fa8d 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800161a:	2304      	movs	r3, #4
 800161c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161e:	2302      	movs	r3, #2
 8001620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	2303      	movs	r3, #3
 8001628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800162a:	2305      	movs	r3, #5
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	480d      	ldr	r0, [pc, #52]	; (800166c <HAL_SPI_MspInit+0xe8>)
 8001636:	f000 fa7d 	bl	8001b34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800163a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800163e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001648:	2303      	movs	r3, #3
 800164a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800164c:	2305      	movs	r3, #5
 800164e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001650:	f107 0314 	add.w	r3, r7, #20
 8001654:	4619      	mov	r1, r3
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <HAL_SPI_MspInit+0xec>)
 8001658:	f000 fa6c 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800165c:	bf00      	nop
 800165e:	3728      	adds	r7, #40	; 0x28
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40003800 	.word	0x40003800
 8001668:	40023800 	.word	0x40023800
 800166c:	40020800 	.word	0x40020800
 8001670:	40020400 	.word	0x40020400

08001674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a19      	ldr	r2, [pc, #100]	; (80016f8 <HAL_UART_MspInit+0x84>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d12b      	bne.n	80016ee <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	613b      	str	r3, [r7, #16]
 800169a:	4b18      	ldr	r3, [pc, #96]	; (80016fc <HAL_UART_MspInit+0x88>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	4a17      	ldr	r2, [pc, #92]	; (80016fc <HAL_UART_MspInit+0x88>)
 80016a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016a4:	6413      	str	r3, [r2, #64]	; 0x40
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_UART_MspInit+0x88>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <HAL_UART_MspInit+0x88>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a10      	ldr	r2, [pc, #64]	; (80016fc <HAL_UART_MspInit+0x88>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_UART_MspInit+0x88>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016ce:	230c      	movs	r3, #12
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016de:	2307      	movs	r3, #7
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <HAL_UART_MspInit+0x8c>)
 80016ea:	f000 fa23 	bl	8001b34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40004400 	.word	0x40004400
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020000 	.word	0x40020000

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001708:	e7fe      	b.n	8001708 <NMI_Handler+0x4>

0800170a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <MemManage_Handler+0x4>

08001716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <UsageFault_Handler+0x4>

08001722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001750:	f000 f8c6 	bl	80018e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	; (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	; (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	; (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f002 fae2 	bl	8003d50 <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	220c      	movs	r2, #12
 8001790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	; (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20020000 	.word	0x20020000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	2000033c 	.word	0x2000033c
 80017c0:	20000358 	.word	0x20000358

080017c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <SystemInit+0x20>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <SystemInit+0x20>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001820 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017ec:	480d      	ldr	r0, [pc, #52]	; (8001824 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ee:	490e      	ldr	r1, [pc, #56]	; (8001828 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f0:	4a0e      	ldr	r2, [pc, #56]	; (800182c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017f4:	e002      	b.n	80017fc <LoopCopyDataInit>

080017f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017fa:	3304      	adds	r3, #4

080017fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001800:	d3f9      	bcc.n	80017f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001804:	4c0b      	ldr	r4, [pc, #44]	; (8001834 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001808:	e001      	b.n	800180e <LoopFillZerobss>

0800180a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800180a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800180c:	3204      	adds	r2, #4

0800180e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800180e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001810:	d3fb      	bcc.n	800180a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001812:	f7ff ffd7 	bl	80017c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001816:	f002 faa1 	bl	8003d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800181a:	f7ff fcc5 	bl	80011a8 <main>
  bx  lr    
 800181e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001820:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001824:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001828:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800182c:	08004814 	.word	0x08004814
  ldr r2, =_sbss
 8001830:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001834:	20000354 	.word	0x20000354

08001838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001838:	e7fe      	b.n	8001838 <ADC_IRQHandler>
	...

0800183c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001840:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_Init+0x40>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <HAL_Init+0x40>)
 8001846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800184a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800184c:	4b0b      	ldr	r3, [pc, #44]	; (800187c <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0a      	ldr	r2, [pc, #40]	; (800187c <HAL_Init+0x40>)
 8001852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a07      	ldr	r2, [pc, #28]	; (800187c <HAL_Init+0x40>)
 800185e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001864:	2003      	movs	r0, #3
 8001866:	f000 f931 	bl	8001acc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800186a:	2000      	movs	r0, #0
 800186c:	f000 f808 	bl	8001880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001870:	f7ff fe60 	bl	8001534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00

08001880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_InitTick+0x54>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_InitTick+0x58>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4619      	mov	r1, r3
 8001892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001896:	fbb3 f3f1 	udiv	r3, r3, r1
 800189a:	fbb2 f3f3 	udiv	r3, r2, r3
 800189e:	4618      	mov	r0, r3
 80018a0:	f000 f93b 	bl	8001b1a <HAL_SYSTICK_Config>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e00e      	b.n	80018cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b0f      	cmp	r3, #15
 80018b2:	d80a      	bhi.n	80018ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b4:	2200      	movs	r2, #0
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	f04f 30ff 	mov.w	r0, #4294967295
 80018bc:	f000 f911 	bl	8001ae2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c0:	4a06      	ldr	r2, [pc, #24]	; (80018dc <HAL_InitTick+0x5c>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
 80018c8:	e000      	b.n	80018cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000000 	.word	0x20000000
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_IncTick+0x20>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_IncTick+0x24>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	4a04      	ldr	r2, [pc, #16]	; (8001904 <HAL_IncTick+0x24>)
 80018f2:	6013      	str	r3, [r2, #0]
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20000008 	.word	0x20000008
 8001904:	20000340 	.word	0x20000340

08001908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  return uwTick;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_GetTick+0x14>)
 800190e:	681b      	ldr	r3, [r3, #0]
}
 8001910:	4618      	mov	r0, r3
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000340 	.word	0x20000340

08001920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001928:	f7ff ffee 	bl	8001908 <HAL_GetTick>
 800192c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001938:	d005      	beq.n	8001946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_Delay+0x44>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	461a      	mov	r2, r3
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001946:	bf00      	nop
 8001948:	f7ff ffde 	bl	8001908 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	429a      	cmp	r2, r3
 8001956:	d8f7      	bhi.n	8001948 <HAL_Delay+0x28>
  {
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000008 	.word	0x20000008

08001968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001968:	b480      	push	{r7}
 800196a:	b085      	sub	sp, #20
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197e:	68ba      	ldr	r2, [r7, #8]
 8001980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001984:	4013      	ands	r3, r2
 8001986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800199a:	4a04      	ldr	r2, [pc, #16]	; (80019ac <__NVIC_SetPriorityGrouping+0x44>)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	60d3      	str	r3, [r2, #12]
}
 80019a0:	bf00      	nop
 80019a2:	3714      	adds	r7, #20
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <__NVIC_GetPriorityGrouping+0x18>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	0a1b      	lsrs	r3, r3, #8
 80019ba:	f003 0307 	and.w	r3, r3, #7
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	6039      	str	r1, [r7, #0]
 80019d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	db0a      	blt.n	80019f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	490c      	ldr	r1, [pc, #48]	; (8001a18 <__NVIC_SetPriority+0x4c>)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	0112      	lsls	r2, r2, #4
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	440b      	add	r3, r1
 80019f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f4:	e00a      	b.n	8001a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	b2da      	uxtb	r2, r3
 80019fa:	4908      	ldr	r1, [pc, #32]	; (8001a1c <__NVIC_SetPriority+0x50>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	3b04      	subs	r3, #4
 8001a04:	0112      	lsls	r2, r2, #4
 8001a06:	b2d2      	uxtb	r2, r2
 8001a08:	440b      	add	r3, r1
 8001a0a:	761a      	strb	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000e100 	.word	0xe000e100
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f1c3 0307 	rsb	r3, r3, #7
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	bf28      	it	cs
 8001a3e:	2304      	movcs	r3, #4
 8001a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2b06      	cmp	r3, #6
 8001a48:	d902      	bls.n	8001a50 <NVIC_EncodePriority+0x30>
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3b03      	subs	r3, #3
 8001a4e:	e000      	b.n	8001a52 <NVIC_EncodePriority+0x32>
 8001a50:	2300      	movs	r3, #0
 8001a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	401a      	ands	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a68:	f04f 31ff 	mov.w	r1, #4294967295
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a72:	43d9      	mvns	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a78:	4313      	orrs	r3, r2
         );
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3724      	adds	r7, #36	; 0x24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
	...

08001a88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a98:	d301      	bcc.n	8001a9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e00f      	b.n	8001abe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <SysTick_Config+0x40>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8001aac:	f7ff ff8e 	bl	80019cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ab6:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SysTick_Config+0x40>)
 8001ab8:	2207      	movs	r2, #7
 8001aba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	e000e010 	.word	0xe000e010

08001acc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7ff ff47 	bl	8001968 <__NVIC_SetPriorityGrouping>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
 8001aee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001af4:	f7ff ff5c 	bl	80019b0 <__NVIC_GetPriorityGrouping>
 8001af8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	6978      	ldr	r0, [r7, #20]
 8001b00:	f7ff ff8e 	bl	8001a20 <NVIC_EncodePriority>
 8001b04:	4602      	mov	r2, r0
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff ff5d 	bl	80019cc <__NVIC_SetPriority>
}
 8001b12:	bf00      	nop
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff ffb0 	bl	8001a88 <SysTick_Config>
 8001b28:	4603      	mov	r3, r0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	; 0x24
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
 8001b4e:	e165      	b.n	8001e1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b50:	2201      	movs	r2, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	f040 8154 	bne.w	8001e16 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d005      	beq.n	8001b86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d130      	bne.n	8001be8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	2203      	movs	r2, #3
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 0201 	and.w	r2, r3, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d017      	beq.n	8001c24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f003 0303 	and.w	r3, r3, #3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d123      	bne.n	8001c78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	08da      	lsrs	r2, r3, #3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3208      	adds	r2, #8
 8001c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	220f      	movs	r2, #15
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	691a      	ldr	r2, [r3, #16]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	69b9      	ldr	r1, [r7, #24]
 8001c74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0203 	and.w	r2, r3, #3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	f000 80ae 	beq.w	8001e16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b5d      	ldr	r3, [pc, #372]	; (8001e34 <HAL_GPIO_Init+0x300>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc2:	4a5c      	ldr	r2, [pc, #368]	; (8001e34 <HAL_GPIO_Init+0x300>)
 8001cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cca:	4b5a      	ldr	r3, [pc, #360]	; (8001e34 <HAL_GPIO_Init+0x300>)
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cd6:	4a58      	ldr	r2, [pc, #352]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	220f      	movs	r2, #15
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a4f      	ldr	r2, [pc, #316]	; (8001e3c <HAL_GPIO_Init+0x308>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d025      	beq.n	8001d4e <HAL_GPIO_Init+0x21a>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a4e      	ldr	r2, [pc, #312]	; (8001e40 <HAL_GPIO_Init+0x30c>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d01f      	beq.n	8001d4a <HAL_GPIO_Init+0x216>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4d      	ldr	r2, [pc, #308]	; (8001e44 <HAL_GPIO_Init+0x310>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d019      	beq.n	8001d46 <HAL_GPIO_Init+0x212>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4c      	ldr	r2, [pc, #304]	; (8001e48 <HAL_GPIO_Init+0x314>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d013      	beq.n	8001d42 <HAL_GPIO_Init+0x20e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4b      	ldr	r2, [pc, #300]	; (8001e4c <HAL_GPIO_Init+0x318>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00d      	beq.n	8001d3e <HAL_GPIO_Init+0x20a>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4a      	ldr	r2, [pc, #296]	; (8001e50 <HAL_GPIO_Init+0x31c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d007      	beq.n	8001d3a <HAL_GPIO_Init+0x206>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a49      	ldr	r2, [pc, #292]	; (8001e54 <HAL_GPIO_Init+0x320>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_GPIO_Init+0x202>
 8001d32:	2306      	movs	r3, #6
 8001d34:	e00c      	b.n	8001d50 <HAL_GPIO_Init+0x21c>
 8001d36:	2307      	movs	r3, #7
 8001d38:	e00a      	b.n	8001d50 <HAL_GPIO_Init+0x21c>
 8001d3a:	2305      	movs	r3, #5
 8001d3c:	e008      	b.n	8001d50 <HAL_GPIO_Init+0x21c>
 8001d3e:	2304      	movs	r3, #4
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x21c>
 8001d42:	2303      	movs	r3, #3
 8001d44:	e004      	b.n	8001d50 <HAL_GPIO_Init+0x21c>
 8001d46:	2302      	movs	r3, #2
 8001d48:	e002      	b.n	8001d50 <HAL_GPIO_Init+0x21c>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e000      	b.n	8001d50 <HAL_GPIO_Init+0x21c>
 8001d4e:	2300      	movs	r3, #0
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	f002 0203 	and.w	r2, r2, #3
 8001d56:	0092      	lsls	r2, r2, #2
 8001d58:	4093      	lsls	r3, r2
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d60:	4935      	ldr	r1, [pc, #212]	; (8001e38 <HAL_GPIO_Init+0x304>)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d6e:	4b3a      	ldr	r3, [pc, #232]	; (8001e58 <HAL_GPIO_Init+0x324>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d92:	4a31      	ldr	r2, [pc, #196]	; (8001e58 <HAL_GPIO_Init+0x324>)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d98:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <HAL_GPIO_Init+0x324>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	43db      	mvns	r3, r3
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dbc:	4a26      	ldr	r2, [pc, #152]	; (8001e58 <HAL_GPIO_Init+0x324>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dc2:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <HAL_GPIO_Init+0x324>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001de6:	4a1c      	ldr	r2, [pc, #112]	; (8001e58 <HAL_GPIO_Init+0x324>)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dec:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_GPIO_Init+0x324>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e10:	4a11      	ldr	r2, [pc, #68]	; (8001e58 <HAL_GPIO_Init+0x324>)
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	2b0f      	cmp	r3, #15
 8001e20:	f67f ae96 	bls.w	8001b50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e24:	bf00      	nop
 8001e26:	bf00      	nop
 8001e28:	3724      	adds	r7, #36	; 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40013800 	.word	0x40013800
 8001e3c:	40020000 	.word	0x40020000
 8001e40:	40020400 	.word	0x40020400
 8001e44:	40020800 	.word	0x40020800
 8001e48:	40020c00 	.word	0x40020c00
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40021400 	.word	0x40021400
 8001e54:	40021800 	.word	0x40021800
 8001e58:	40013c00 	.word	0x40013c00

08001e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e6c:	787b      	ldrb	r3, [r7, #1]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e78:	e003      	b.n	8001e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	041a      	lsls	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	619a      	str	r2, [r3, #24]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0cc      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea4:	4b68      	ldr	r3, [pc, #416]	; (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d90c      	bls.n	8001ecc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb2:	4b65      	ldr	r3, [pc, #404]	; (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eba:	4b63      	ldr	r3, [pc, #396]	; (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d001      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	e0b8      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d020      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d005      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee4:	4b59      	ldr	r3, [pc, #356]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4a58      	ldr	r2, [pc, #352]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d005      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001efc:	4b53      	ldr	r3, [pc, #332]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	4a52      	ldr	r2, [pc, #328]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f08:	4b50      	ldr	r3, [pc, #320]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	494d      	ldr	r1, [pc, #308]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d044      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	4b47      	ldr	r3, [pc, #284]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d119      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e07f      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d003      	beq.n	8001f4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4e:	4b3f      	ldr	r3, [pc, #252]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e06f      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d101      	bne.n	8001f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e067      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f6e:	4b37      	ldr	r3, [pc, #220]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f023 0203 	bic.w	r2, r3, #3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	4934      	ldr	r1, [pc, #208]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f80:	f7ff fcc2 	bl	8001908 <HAL_GetTick>
 8001f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	e00a      	b.n	8001f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f88:	f7ff fcbe 	bl	8001908 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e04f      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	4b2b      	ldr	r3, [pc, #172]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 020c 	and.w	r2, r3, #12
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d1eb      	bne.n	8001f88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b25      	ldr	r3, [pc, #148]	; (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 030f 	and.w	r3, r3, #15
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d20c      	bcs.n	8001fd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b22      	ldr	r3, [pc, #136]	; (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc0:	683a      	ldr	r2, [r7, #0]
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d001      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e032      	b.n	800203e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d008      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4916      	ldr	r1, [pc, #88]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	691b      	ldr	r3, [r3, #16]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	490e      	ldr	r1, [pc, #56]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002016:	f000 f855 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 800201a:	4602      	mov	r2, r0
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_ClockConfig+0x1bc>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	490a      	ldr	r1, [pc, #40]	; (8002050 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	5ccb      	ldrb	r3, [r1, r3]
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	4a09      	ldr	r2, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1c4>)
 8002030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1c8>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fc22 	bl	8001880 <HAL_InitTick>

  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023c00 	.word	0x40023c00
 800204c:	40023800 	.word	0x40023800
 8002050:	080047b8 	.word	0x080047b8
 8002054:	20000000 	.word	0x20000000
 8002058:	20000004 	.word	0x20000004

0800205c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_RCC_GetHCLKFreq+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000000 	.word	0x20000000

08002074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002078:	f7ff fff0 	bl	800205c <HAL_RCC_GetHCLKFreq>
 800207c:	4602      	mov	r2, r0
 800207e:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	0a9b      	lsrs	r3, r3, #10
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	4903      	ldr	r1, [pc, #12]	; (8002098 <HAL_RCC_GetPCLK1Freq+0x24>)
 800208a:	5ccb      	ldrb	r3, [r1, r3]
 800208c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002090:	4618      	mov	r0, r3
 8002092:	bd80      	pop	{r7, pc}
 8002094:	40023800 	.word	0x40023800
 8002098:	080047c8 	.word	0x080047c8

0800209c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020a0:	f7ff ffdc 	bl	800205c <HAL_RCC_GetHCLKFreq>
 80020a4:	4602      	mov	r2, r0
 80020a6:	4b05      	ldr	r3, [pc, #20]	; (80020bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	0b5b      	lsrs	r3, r3, #13
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	4903      	ldr	r1, [pc, #12]	; (80020c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b2:	5ccb      	ldrb	r3, [r1, r3]
 80020b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40023800 	.word	0x40023800
 80020c0:	080047c8 	.word	0x080047c8

080020c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020c8:	b0ae      	sub	sp, #184	; 0xb8
 80020ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020ea:	4bcb      	ldr	r3, [pc, #812]	; (8002418 <HAL_RCC_GetSysClockFreq+0x354>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f003 030c 	and.w	r3, r3, #12
 80020f2:	2b0c      	cmp	r3, #12
 80020f4:	f200 8206 	bhi.w	8002504 <HAL_RCC_GetSysClockFreq+0x440>
 80020f8:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <HAL_RCC_GetSysClockFreq+0x3c>)
 80020fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fe:	bf00      	nop
 8002100:	08002135 	.word	0x08002135
 8002104:	08002505 	.word	0x08002505
 8002108:	08002505 	.word	0x08002505
 800210c:	08002505 	.word	0x08002505
 8002110:	0800213d 	.word	0x0800213d
 8002114:	08002505 	.word	0x08002505
 8002118:	08002505 	.word	0x08002505
 800211c:	08002505 	.word	0x08002505
 8002120:	08002145 	.word	0x08002145
 8002124:	08002505 	.word	0x08002505
 8002128:	08002505 	.word	0x08002505
 800212c:	08002505 	.word	0x08002505
 8002130:	08002335 	.word	0x08002335
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002134:	4bb9      	ldr	r3, [pc, #740]	; (800241c <HAL_RCC_GetSysClockFreq+0x358>)
 8002136:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800213a:	e1e7      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800213c:	4bb8      	ldr	r3, [pc, #736]	; (8002420 <HAL_RCC_GetSysClockFreq+0x35c>)
 800213e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002142:	e1e3      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002144:	4bb4      	ldr	r3, [pc, #720]	; (8002418 <HAL_RCC_GetSysClockFreq+0x354>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800214c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002150:	4bb1      	ldr	r3, [pc, #708]	; (8002418 <HAL_RCC_GetSysClockFreq+0x354>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d071      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800215c:	4bae      	ldr	r3, [pc, #696]	; (8002418 <HAL_RCC_GetSysClockFreq+0x354>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	099b      	lsrs	r3, r3, #6
 8002162:	2200      	movs	r2, #0
 8002164:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002168:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800216c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002170:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002174:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002178:	2300      	movs	r3, #0
 800217a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800217e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002182:	4622      	mov	r2, r4
 8002184:	462b      	mov	r3, r5
 8002186:	f04f 0000 	mov.w	r0, #0
 800218a:	f04f 0100 	mov.w	r1, #0
 800218e:	0159      	lsls	r1, r3, #5
 8002190:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002194:	0150      	lsls	r0, r2, #5
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4621      	mov	r1, r4
 800219c:	1a51      	subs	r1, r2, r1
 800219e:	6439      	str	r1, [r7, #64]	; 0x40
 80021a0:	4629      	mov	r1, r5
 80021a2:	eb63 0301 	sbc.w	r3, r3, r1
 80021a6:	647b      	str	r3, [r7, #68]	; 0x44
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80021b4:	4649      	mov	r1, r9
 80021b6:	018b      	lsls	r3, r1, #6
 80021b8:	4641      	mov	r1, r8
 80021ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021be:	4641      	mov	r1, r8
 80021c0:	018a      	lsls	r2, r1, #6
 80021c2:	4641      	mov	r1, r8
 80021c4:	1a51      	subs	r1, r2, r1
 80021c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80021c8:	4649      	mov	r1, r9
 80021ca:	eb63 0301 	sbc.w	r3, r3, r1
 80021ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80021dc:	4649      	mov	r1, r9
 80021de:	00cb      	lsls	r3, r1, #3
 80021e0:	4641      	mov	r1, r8
 80021e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021e6:	4641      	mov	r1, r8
 80021e8:	00ca      	lsls	r2, r1, #3
 80021ea:	4610      	mov	r0, r2
 80021ec:	4619      	mov	r1, r3
 80021ee:	4603      	mov	r3, r0
 80021f0:	4622      	mov	r2, r4
 80021f2:	189b      	adds	r3, r3, r2
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
 80021f6:	462b      	mov	r3, r5
 80021f8:	460a      	mov	r2, r1
 80021fa:	eb42 0303 	adc.w	r3, r2, r3
 80021fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800220c:	4629      	mov	r1, r5
 800220e:	024b      	lsls	r3, r1, #9
 8002210:	4621      	mov	r1, r4
 8002212:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002216:	4621      	mov	r1, r4
 8002218:	024a      	lsls	r2, r1, #9
 800221a:	4610      	mov	r0, r2
 800221c:	4619      	mov	r1, r3
 800221e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002222:	2200      	movs	r2, #0
 8002224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002228:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800222c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002230:	f7fe f83e 	bl	80002b0 <__aeabi_uldivmod>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4613      	mov	r3, r2
 800223a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800223e:	e067      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002240:	4b75      	ldr	r3, [pc, #468]	; (8002418 <HAL_RCC_GetSysClockFreq+0x354>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	099b      	lsrs	r3, r3, #6
 8002246:	2200      	movs	r2, #0
 8002248:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800224c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002250:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002258:	67bb      	str	r3, [r7, #120]	; 0x78
 800225a:	2300      	movs	r3, #0
 800225c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800225e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002262:	4622      	mov	r2, r4
 8002264:	462b      	mov	r3, r5
 8002266:	f04f 0000 	mov.w	r0, #0
 800226a:	f04f 0100 	mov.w	r1, #0
 800226e:	0159      	lsls	r1, r3, #5
 8002270:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002274:	0150      	lsls	r0, r2, #5
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4621      	mov	r1, r4
 800227c:	1a51      	subs	r1, r2, r1
 800227e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002280:	4629      	mov	r1, r5
 8002282:	eb63 0301 	sbc.w	r3, r3, r1
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002288:	f04f 0200 	mov.w	r2, #0
 800228c:	f04f 0300 	mov.w	r3, #0
 8002290:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002294:	4649      	mov	r1, r9
 8002296:	018b      	lsls	r3, r1, #6
 8002298:	4641      	mov	r1, r8
 800229a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800229e:	4641      	mov	r1, r8
 80022a0:	018a      	lsls	r2, r1, #6
 80022a2:	4641      	mov	r1, r8
 80022a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80022a8:	4649      	mov	r1, r9
 80022aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80022ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80022be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022c2:	4692      	mov	sl, r2
 80022c4:	469b      	mov	fp, r3
 80022c6:	4623      	mov	r3, r4
 80022c8:	eb1a 0303 	adds.w	r3, sl, r3
 80022cc:	623b      	str	r3, [r7, #32]
 80022ce:	462b      	mov	r3, r5
 80022d0:	eb4b 0303 	adc.w	r3, fp, r3
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80022e2:	4629      	mov	r1, r5
 80022e4:	028b      	lsls	r3, r1, #10
 80022e6:	4621      	mov	r1, r4
 80022e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022ec:	4621      	mov	r1, r4
 80022ee:	028a      	lsls	r2, r1, #10
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80022f8:	2200      	movs	r2, #0
 80022fa:	673b      	str	r3, [r7, #112]	; 0x70
 80022fc:	677a      	str	r2, [r7, #116]	; 0x74
 80022fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002302:	f7fd ffd5 	bl	80002b0 <__aeabi_uldivmod>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4613      	mov	r3, r2
 800230c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002310:	4b41      	ldr	r3, [pc, #260]	; (8002418 <HAL_RCC_GetSysClockFreq+0x354>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	0c1b      	lsrs	r3, r3, #16
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	3301      	adds	r3, #1
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002322:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002326:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800232a:	fbb2 f3f3 	udiv	r3, r2, r3
 800232e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002332:	e0eb      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002334:	4b38      	ldr	r3, [pc, #224]	; (8002418 <HAL_RCC_GetSysClockFreq+0x354>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800233c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002340:	4b35      	ldr	r3, [pc, #212]	; (8002418 <HAL_RCC_GetSysClockFreq+0x354>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d06b      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800234c:	4b32      	ldr	r3, [pc, #200]	; (8002418 <HAL_RCC_GetSysClockFreq+0x354>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	2200      	movs	r2, #0
 8002354:	66bb      	str	r3, [r7, #104]	; 0x68
 8002356:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800235a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800235e:	663b      	str	r3, [r7, #96]	; 0x60
 8002360:	2300      	movs	r3, #0
 8002362:	667b      	str	r3, [r7, #100]	; 0x64
 8002364:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002368:	4622      	mov	r2, r4
 800236a:	462b      	mov	r3, r5
 800236c:	f04f 0000 	mov.w	r0, #0
 8002370:	f04f 0100 	mov.w	r1, #0
 8002374:	0159      	lsls	r1, r3, #5
 8002376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800237a:	0150      	lsls	r0, r2, #5
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4621      	mov	r1, r4
 8002382:	1a51      	subs	r1, r2, r1
 8002384:	61b9      	str	r1, [r7, #24]
 8002386:	4629      	mov	r1, r5
 8002388:	eb63 0301 	sbc.w	r3, r3, r1
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	f04f 0200 	mov.w	r2, #0
 8002392:	f04f 0300 	mov.w	r3, #0
 8002396:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800239a:	4659      	mov	r1, fp
 800239c:	018b      	lsls	r3, r1, #6
 800239e:	4651      	mov	r1, sl
 80023a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023a4:	4651      	mov	r1, sl
 80023a6:	018a      	lsls	r2, r1, #6
 80023a8:	4651      	mov	r1, sl
 80023aa:	ebb2 0801 	subs.w	r8, r2, r1
 80023ae:	4659      	mov	r1, fp
 80023b0:	eb63 0901 	sbc.w	r9, r3, r1
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023c8:	4690      	mov	r8, r2
 80023ca:	4699      	mov	r9, r3
 80023cc:	4623      	mov	r3, r4
 80023ce:	eb18 0303 	adds.w	r3, r8, r3
 80023d2:	613b      	str	r3, [r7, #16]
 80023d4:	462b      	mov	r3, r5
 80023d6:	eb49 0303 	adc.w	r3, r9, r3
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80023e8:	4629      	mov	r1, r5
 80023ea:	024b      	lsls	r3, r1, #9
 80023ec:	4621      	mov	r1, r4
 80023ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023f2:	4621      	mov	r1, r4
 80023f4:	024a      	lsls	r2, r1, #9
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023fe:	2200      	movs	r2, #0
 8002400:	65bb      	str	r3, [r7, #88]	; 0x58
 8002402:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002404:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002408:	f7fd ff52 	bl	80002b0 <__aeabi_uldivmod>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	4613      	mov	r3, r2
 8002412:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002416:	e065      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0x420>
 8002418:	40023800 	.word	0x40023800
 800241c:	00f42400 	.word	0x00f42400
 8002420:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002424:	4b3d      	ldr	r3, [pc, #244]	; (800251c <HAL_RCC_GetSysClockFreq+0x458>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	099b      	lsrs	r3, r3, #6
 800242a:	2200      	movs	r2, #0
 800242c:	4618      	mov	r0, r3
 800242e:	4611      	mov	r1, r2
 8002430:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002434:	653b      	str	r3, [r7, #80]	; 0x50
 8002436:	2300      	movs	r3, #0
 8002438:	657b      	str	r3, [r7, #84]	; 0x54
 800243a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800243e:	4642      	mov	r2, r8
 8002440:	464b      	mov	r3, r9
 8002442:	f04f 0000 	mov.w	r0, #0
 8002446:	f04f 0100 	mov.w	r1, #0
 800244a:	0159      	lsls	r1, r3, #5
 800244c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002450:	0150      	lsls	r0, r2, #5
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4641      	mov	r1, r8
 8002458:	1a51      	subs	r1, r2, r1
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	4649      	mov	r1, r9
 800245e:	eb63 0301 	sbc.w	r3, r3, r1
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002470:	4659      	mov	r1, fp
 8002472:	018b      	lsls	r3, r1, #6
 8002474:	4651      	mov	r1, sl
 8002476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800247a:	4651      	mov	r1, sl
 800247c:	018a      	lsls	r2, r1, #6
 800247e:	4651      	mov	r1, sl
 8002480:	1a54      	subs	r4, r2, r1
 8002482:	4659      	mov	r1, fp
 8002484:	eb63 0501 	sbc.w	r5, r3, r1
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	00eb      	lsls	r3, r5, #3
 8002492:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002496:	00e2      	lsls	r2, r4, #3
 8002498:	4614      	mov	r4, r2
 800249a:	461d      	mov	r5, r3
 800249c:	4643      	mov	r3, r8
 800249e:	18e3      	adds	r3, r4, r3
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	464b      	mov	r3, r9
 80024a4:	eb45 0303 	adc.w	r3, r5, r3
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	f04f 0200 	mov.w	r2, #0
 80024ae:	f04f 0300 	mov.w	r3, #0
 80024b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024b6:	4629      	mov	r1, r5
 80024b8:	028b      	lsls	r3, r1, #10
 80024ba:	4621      	mov	r1, r4
 80024bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024c0:	4621      	mov	r1, r4
 80024c2:	028a      	lsls	r2, r1, #10
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024cc:	2200      	movs	r2, #0
 80024ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80024d0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80024d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024d6:	f7fd feeb 	bl	80002b0 <__aeabi_uldivmod>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4613      	mov	r3, r2
 80024e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <HAL_RCC_GetSysClockFreq+0x458>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	0f1b      	lsrs	r3, r3, #28
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80024f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002502:	e003      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002506:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800250a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002510:	4618      	mov	r0, r3
 8002512:	37b8      	adds	r7, #184	; 0xb8
 8002514:	46bd      	mov	sp, r7
 8002516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800251a:	bf00      	nop
 800251c:	40023800 	.word	0x40023800
 8002520:	00f42400 	.word	0x00f42400

08002524 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e28d      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 8083 	beq.w	800264a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002544:	4b94      	ldr	r3, [pc, #592]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	2b04      	cmp	r3, #4
 800254e:	d019      	beq.n	8002584 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002550:	4b91      	ldr	r3, [pc, #580]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002558:	2b08      	cmp	r3, #8
 800255a:	d106      	bne.n	800256a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800255c:	4b8e      	ldr	r3, [pc, #568]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002568:	d00c      	beq.n	8002584 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800256a:	4b8b      	ldr	r3, [pc, #556]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d112      	bne.n	800259c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002576:	4b88      	ldr	r3, [pc, #544]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002582:	d10b      	bne.n	800259c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002584:	4b84      	ldr	r3, [pc, #528]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d05b      	beq.n	8002648 <HAL_RCC_OscConfig+0x124>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d157      	bne.n	8002648 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e25a      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a4:	d106      	bne.n	80025b4 <HAL_RCC_OscConfig+0x90>
 80025a6:	4b7c      	ldr	r3, [pc, #496]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a7b      	ldr	r2, [pc, #492]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 80025ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	e01d      	b.n	80025f0 <HAL_RCC_OscConfig+0xcc>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCC_OscConfig+0xb4>
 80025be:	4b76      	ldr	r3, [pc, #472]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a75      	ldr	r2, [pc, #468]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 80025c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	4b73      	ldr	r3, [pc, #460]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a72      	ldr	r2, [pc, #456]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 80025d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d4:	6013      	str	r3, [r2, #0]
 80025d6:	e00b      	b.n	80025f0 <HAL_RCC_OscConfig+0xcc>
 80025d8:	4b6f      	ldr	r3, [pc, #444]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a6e      	ldr	r2, [pc, #440]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 80025de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4b6c      	ldr	r3, [pc, #432]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a6b      	ldr	r2, [pc, #428]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 80025ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d013      	beq.n	8002620 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f8:	f7ff f986 	bl	8001908 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002600:	f7ff f982 	bl	8001908 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b64      	cmp	r3, #100	; 0x64
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e21f      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	4b61      	ldr	r3, [pc, #388]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0xdc>
 800261e:	e014      	b.n	800264a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002620:	f7ff f972 	bl	8001908 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002628:	f7ff f96e 	bl	8001908 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	; 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e20b      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263a:	4b57      	ldr	r3, [pc, #348]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d1f0      	bne.n	8002628 <HAL_RCC_OscConfig+0x104>
 8002646:	e000      	b.n	800264a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d06f      	beq.n	8002736 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002656:	4b50      	ldr	r3, [pc, #320]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 030c 	and.w	r3, r3, #12
 800265e:	2b00      	cmp	r3, #0
 8002660:	d017      	beq.n	8002692 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002662:	4b4d      	ldr	r3, [pc, #308]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800266a:	2b08      	cmp	r3, #8
 800266c:	d105      	bne.n	800267a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800266e:	4b4a      	ldr	r3, [pc, #296]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800267a:	4b47      	ldr	r3, [pc, #284]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002682:	2b0c      	cmp	r3, #12
 8002684:	d11c      	bne.n	80026c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002686:	4b44      	ldr	r3, [pc, #272]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d116      	bne.n	80026c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002692:	4b41      	ldr	r3, [pc, #260]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_RCC_OscConfig+0x186>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d001      	beq.n	80026aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e1d3      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4937      	ldr	r1, [pc, #220]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026be:	e03a      	b.n	8002736 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d020      	beq.n	800270a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c8:	4b34      	ldr	r3, [pc, #208]	; (800279c <HAL_RCC_OscConfig+0x278>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7ff f91b 	bl	8001908 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d6:	f7ff f917 	bl	8001908 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e1b4      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e8:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f4:	4b28      	ldr	r3, [pc, #160]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	00db      	lsls	r3, r3, #3
 8002702:	4925      	ldr	r1, [pc, #148]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 8002704:	4313      	orrs	r3, r2
 8002706:	600b      	str	r3, [r1, #0]
 8002708:	e015      	b.n	8002736 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270a:	4b24      	ldr	r3, [pc, #144]	; (800279c <HAL_RCC_OscConfig+0x278>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7ff f8fa 	bl	8001908 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002718:	f7ff f8f6 	bl	8001908 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e193      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272a:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b00      	cmp	r3, #0
 8002740:	d036      	beq.n	80027b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d016      	beq.n	8002778 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800274a:	4b15      	ldr	r3, [pc, #84]	; (80027a0 <HAL_RCC_OscConfig+0x27c>)
 800274c:	2201      	movs	r2, #1
 800274e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7ff f8da 	bl	8001908 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002758:	f7ff f8d6 	bl	8001908 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e173      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276a:	4b0b      	ldr	r3, [pc, #44]	; (8002798 <HAL_RCC_OscConfig+0x274>)
 800276c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f0      	beq.n	8002758 <HAL_RCC_OscConfig+0x234>
 8002776:	e01b      	b.n	80027b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002778:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <HAL_RCC_OscConfig+0x27c>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277e:	f7ff f8c3 	bl	8001908 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	e00e      	b.n	80027a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002786:	f7ff f8bf 	bl	8001908 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d907      	bls.n	80027a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e15c      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
 8002798:	40023800 	.word	0x40023800
 800279c:	42470000 	.word	0x42470000
 80027a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a4:	4b8a      	ldr	r3, [pc, #552]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 80027a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1ea      	bne.n	8002786 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 8097 	beq.w	80028ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027be:	2300      	movs	r3, #0
 80027c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c2:	4b83      	ldr	r3, [pc, #524]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10f      	bne.n	80027ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60bb      	str	r3, [r7, #8]
 80027d2:	4b7f      	ldr	r3, [pc, #508]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a7e      	ldr	r2, [pc, #504]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 80027d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b7c      	ldr	r3, [pc, #496]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	60bb      	str	r3, [r7, #8]
 80027e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ea:	2301      	movs	r3, #1
 80027ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ee:	4b79      	ldr	r3, [pc, #484]	; (80029d4 <HAL_RCC_OscConfig+0x4b0>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d118      	bne.n	800282c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027fa:	4b76      	ldr	r3, [pc, #472]	; (80029d4 <HAL_RCC_OscConfig+0x4b0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a75      	ldr	r2, [pc, #468]	; (80029d4 <HAL_RCC_OscConfig+0x4b0>)
 8002800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002806:	f7ff f87f 	bl	8001908 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280e:	f7ff f87b 	bl	8001908 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e118      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	4b6c      	ldr	r3, [pc, #432]	; (80029d4 <HAL_RCC_OscConfig+0x4b0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d106      	bne.n	8002842 <HAL_RCC_OscConfig+0x31e>
 8002834:	4b66      	ldr	r3, [pc, #408]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	4a65      	ldr	r2, [pc, #404]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 800283a:	f043 0301 	orr.w	r3, r3, #1
 800283e:	6713      	str	r3, [r2, #112]	; 0x70
 8002840:	e01c      	b.n	800287c <HAL_RCC_OscConfig+0x358>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b05      	cmp	r3, #5
 8002848:	d10c      	bne.n	8002864 <HAL_RCC_OscConfig+0x340>
 800284a:	4b61      	ldr	r3, [pc, #388]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	4a60      	ldr	r2, [pc, #384]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 8002850:	f043 0304 	orr.w	r3, r3, #4
 8002854:	6713      	str	r3, [r2, #112]	; 0x70
 8002856:	4b5e      	ldr	r3, [pc, #376]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285a:	4a5d      	ldr	r2, [pc, #372]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6713      	str	r3, [r2, #112]	; 0x70
 8002862:	e00b      	b.n	800287c <HAL_RCC_OscConfig+0x358>
 8002864:	4b5a      	ldr	r3, [pc, #360]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	4a59      	ldr	r2, [pc, #356]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	6713      	str	r3, [r2, #112]	; 0x70
 8002870:	4b57      	ldr	r3, [pc, #348]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	4a56      	ldr	r2, [pc, #344]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 8002876:	f023 0304 	bic.w	r3, r3, #4
 800287a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d015      	beq.n	80028b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7ff f840 	bl	8001908 <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7ff f83c 	bl	8001908 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	; 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e0d7      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a2:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0ee      	beq.n	800288c <HAL_RCC_OscConfig+0x368>
 80028ae:	e014      	b.n	80028da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7ff f82a 	bl	8001908 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7ff f826 	bl	8001908 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e0c1      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ce:	4b40      	ldr	r3, [pc, #256]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1ee      	bne.n	80028b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028da:	7dfb      	ldrb	r3, [r7, #23]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d105      	bne.n	80028ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e0:	4b3b      	ldr	r3, [pc, #236]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	4a3a      	ldr	r2, [pc, #232]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 80028e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80ad 	beq.w	8002a50 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028f6:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d060      	beq.n	80029c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d145      	bne.n	8002996 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290a:	4b33      	ldr	r3, [pc, #204]	; (80029d8 <HAL_RCC_OscConfig+0x4b4>)
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7fe fffa 	bl	8001908 <HAL_GetTick>
 8002914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002918:	f7fe fff6 	bl	8001908 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e093      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	019b      	lsls	r3, r3, #6
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	3b01      	subs	r3, #1
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	061b      	lsls	r3, r3, #24
 800295a:	431a      	orrs	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	071b      	lsls	r3, r3, #28
 8002962:	491b      	ldr	r1, [pc, #108]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCC_OscConfig+0x4b4>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7fe ffcb 	bl	8001908 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002976:	f7fe ffc7 	bl	8001908 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e064      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x452>
 8002994:	e05c      	b.n	8002a50 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_RCC_OscConfig+0x4b4>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe ffb4 	bl	8001908 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a4:	f7fe ffb0 	bl	8001908 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e04d      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_OscConfig+0x4ac>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x480>
 80029c2:	e045      	b.n	8002a50 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e040      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
 80029d0:	40023800 	.word	0x40023800
 80029d4:	40007000 	.word	0x40007000
 80029d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029dc:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <HAL_RCC_OscConfig+0x538>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d030      	beq.n	8002a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d129      	bne.n	8002a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d122      	bne.n	8002a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d119      	bne.n	8002a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	085b      	lsrs	r3, r3, #1
 8002a24:	3b01      	subs	r3, #1
 8002a26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d10f      	bne.n	8002a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3718      	adds	r7, #24
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40023800 	.word	0x40023800

08002a60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e07b      	b.n	8002b6a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d108      	bne.n	8002a8c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a82:	d009      	beq.n	8002a98 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
 8002a8a:	e005      	b.n	8002a98 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d106      	bne.n	8002ab8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7fe fd66 	bl	8001584 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681a      	ldr	r2, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ace:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b12:	431a      	orrs	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1c:	ea42 0103 	orr.w	r1, r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	0c1b      	lsrs	r3, r3, #16
 8002b36:	f003 0104 	and.w	r1, r3, #4
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	f003 0210 	and.w	r2, r3, #16
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b088      	sub	sp, #32
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_SPI_Transmit+0x22>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e126      	b.n	8002de2 <HAL_SPI_Transmit+0x270>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b9c:	f7fe feb4 	bl	8001908 <HAL_GetTick>
 8002ba0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d002      	beq.n	8002bb8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bb6:	e10b      	b.n	8002dd0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d002      	beq.n	8002bc4 <HAL_SPI_Transmit+0x52>
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d102      	bne.n	8002bca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bc8:	e102      	b.n	8002dd0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2203      	movs	r2, #3
 8002bce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	88fa      	ldrh	r2, [r7, #6]
 8002be2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	88fa      	ldrh	r2, [r7, #6]
 8002be8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c10:	d10f      	bne.n	8002c32 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c30:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3c:	2b40      	cmp	r3, #64	; 0x40
 8002c3e:	d007      	beq.n	8002c50 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c4e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c58:	d14b      	bne.n	8002cf2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d002      	beq.n	8002c68 <HAL_SPI_Transmit+0xf6>
 8002c62:	8afb      	ldrh	r3, [r7, #22]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d13e      	bne.n	8002ce6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	881a      	ldrh	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	1c9a      	adds	r2, r3, #2
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c8c:	e02b      	b.n	8002ce6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d112      	bne.n	8002cc2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca0:	881a      	ldrh	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cac:	1c9a      	adds	r2, r3, #2
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8002cc0:	e011      	b.n	8002ce6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cc2:	f7fe fe21 	bl	8001908 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d803      	bhi.n	8002cda <HAL_SPI_Transmit+0x168>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd8:	d102      	bne.n	8002ce0 <HAL_SPI_Transmit+0x16e>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d102      	bne.n	8002ce6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ce4:	e074      	b.n	8002dd0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1ce      	bne.n	8002c8e <HAL_SPI_Transmit+0x11c>
 8002cf0:	e04c      	b.n	8002d8c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <HAL_SPI_Transmit+0x18e>
 8002cfa:	8afb      	ldrh	r3, [r7, #22]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d140      	bne.n	8002d82 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	7812      	ldrb	r2, [r2, #0]
 8002d0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d26:	e02c      	b.n	8002d82 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d113      	bne.n	8002d5e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	330c      	adds	r3, #12
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d5c:	e011      	b.n	8002d82 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d5e:	f7fe fdd3 	bl	8001908 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d803      	bhi.n	8002d76 <HAL_SPI_Transmit+0x204>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d102      	bne.n	8002d7c <HAL_SPI_Transmit+0x20a>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002d80:	e026      	b.n	8002dd0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1cd      	bne.n	8002d28 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	6839      	ldr	r1, [r7, #0]
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 fbd9 	bl	8003548 <SPI_EndRxTxTransaction>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10a      	bne.n	8002dc0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	77fb      	strb	r3, [r7, #31]
 8002dcc:	e000      	b.n	8002dd0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002dce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002de0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3720      	adds	r7, #32
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b088      	sub	sp, #32
 8002dee:	af02      	add	r7, sp, #8
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	4613      	mov	r3, r2
 8002df8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e06:	d112      	bne.n	8002e2e <HAL_SPI_Receive+0x44>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10e      	bne.n	8002e2e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2204      	movs	r2, #4
 8002e14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e18:	88fa      	ldrh	r2, [r7, #6]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	68b9      	ldr	r1, [r7, #8]
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f8f1 	bl	800300c <HAL_SPI_TransmitReceive>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	e0ea      	b.n	8003004 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_SPI_Receive+0x52>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e0e3      	b.n	8003004 <HAL_SPI_Receive+0x21a>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e44:	f7fe fd60 	bl	8001908 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d002      	beq.n	8002e5c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002e56:	2302      	movs	r3, #2
 8002e58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e5a:	e0ca      	b.n	8002ff2 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_SPI_Receive+0x7e>
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e6c:	e0c1      	b.n	8002ff2 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2204      	movs	r2, #4
 8002e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	88fa      	ldrh	r2, [r7, #6]
 8002e86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	88fa      	ldrh	r2, [r7, #6]
 8002e8c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb4:	d10f      	bne.n	8002ed6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ec4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ed4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee0:	2b40      	cmp	r3, #64	; 0x40
 8002ee2:	d007      	beq.n	8002ef4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ef2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d162      	bne.n	8002fc2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002efc:	e02e      	b.n	8002f5c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d115      	bne.n	8002f38 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f103 020c 	add.w	r2, r3, #12
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	7812      	ldrb	r2, [r2, #0]
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f36:	e011      	b.n	8002f5c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f38:	f7fe fce6 	bl	8001908 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d803      	bhi.n	8002f50 <HAL_SPI_Receive+0x166>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d102      	bne.n	8002f56 <HAL_SPI_Receive+0x16c>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d102      	bne.n	8002f5c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f5a:	e04a      	b.n	8002ff2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1cb      	bne.n	8002efe <HAL_SPI_Receive+0x114>
 8002f66:	e031      	b.n	8002fcc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d113      	bne.n	8002f9e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	68da      	ldr	r2, [r3, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f80:	b292      	uxth	r2, r2
 8002f82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	1c9a      	adds	r2, r3, #2
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	3b01      	subs	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f9c:	e011      	b.n	8002fc2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f9e:	f7fe fcb3 	bl	8001908 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d803      	bhi.n	8002fb6 <HAL_SPI_Receive+0x1cc>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d102      	bne.n	8002fbc <HAL_SPI_Receive+0x1d2>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fc0:	e017      	b.n	8002ff2 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1cd      	bne.n	8002f68 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fcc:	693a      	ldr	r2, [r7, #16]
 8002fce:	6839      	ldr	r1, [r7, #0]
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fa53 	bl	800347c <SPI_EndRxTransaction>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d002      	beq.n	8002ff0 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	75fb      	strb	r3, [r7, #23]
 8002fee:	e000      	b.n	8002ff2 <HAL_SPI_Receive+0x208>
  }

error :
 8002ff0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003002:	7dfb      	ldrb	r3, [r7, #23]
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b08c      	sub	sp, #48	; 0x30
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800301a:	2301      	movs	r3, #1
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <HAL_SPI_TransmitReceive+0x26>
 800302e:	2302      	movs	r3, #2
 8003030:	e18a      	b.n	8003348 <HAL_SPI_TransmitReceive+0x33c>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800303a:	f7fe fc65 	bl	8001908 <HAL_GetTick>
 800303e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003050:	887b      	ldrh	r3, [r7, #2]
 8003052:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003054:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003058:	2b01      	cmp	r3, #1
 800305a:	d00f      	beq.n	800307c <HAL_SPI_TransmitReceive+0x70>
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003062:	d107      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d103      	bne.n	8003074 <HAL_SPI_TransmitReceive+0x68>
 800306c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003070:	2b04      	cmp	r3, #4
 8003072:	d003      	beq.n	800307c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003074:	2302      	movs	r3, #2
 8003076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800307a:	e15b      	b.n	8003334 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <HAL_SPI_TransmitReceive+0x82>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d002      	beq.n	800308e <HAL_SPI_TransmitReceive+0x82>
 8003088:	887b      	ldrh	r3, [r7, #2]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d103      	bne.n	8003096 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003094:	e14e      	b.n	8003334 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b04      	cmp	r3, #4
 80030a0:	d003      	beq.n	80030aa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2205      	movs	r2, #5
 80030a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	887a      	ldrh	r2, [r7, #2]
 80030ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	887a      	ldrh	r2, [r7, #2]
 80030c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	887a      	ldrh	r2, [r7, #2]
 80030cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	887a      	ldrh	r2, [r7, #2]
 80030d2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	d007      	beq.n	80030fe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003106:	d178      	bne.n	80031fa <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d002      	beq.n	8003116 <HAL_SPI_TransmitReceive+0x10a>
 8003110:	8b7b      	ldrh	r3, [r7, #26]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d166      	bne.n	80031e4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	881a      	ldrh	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	1c9a      	adds	r2, r3, #2
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800313a:	e053      	b.n	80031e4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b02      	cmp	r3, #2
 8003148:	d11b      	bne.n	8003182 <HAL_SPI_TransmitReceive+0x176>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800314e:	b29b      	uxth	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	d016      	beq.n	8003182 <HAL_SPI_TransmitReceive+0x176>
 8003154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003156:	2b01      	cmp	r3, #1
 8003158:	d113      	bne.n	8003182 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	881a      	ldrh	r2, [r3, #0]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	1c9a      	adds	r2, r3, #2
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003174:	b29b      	uxth	r3, r3
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b01      	cmp	r3, #1
 800318e:	d119      	bne.n	80031c4 <HAL_SPI_TransmitReceive+0x1b8>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003194:	b29b      	uxth	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d014      	beq.n	80031c4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a4:	b292      	uxth	r2, r2
 80031a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ac:	1c9a      	adds	r2, r3, #2
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031c0:	2301      	movs	r3, #1
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031c4:	f7fe fba0 	bl	8001908 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d807      	bhi.n	80031e4 <HAL_SPI_TransmitReceive+0x1d8>
 80031d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031da:	d003      	beq.n	80031e4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80031e2:	e0a7      	b.n	8003334 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1a6      	bne.n	800313c <HAL_SPI_TransmitReceive+0x130>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1a1      	bne.n	800313c <HAL_SPI_TransmitReceive+0x130>
 80031f8:	e07c      	b.n	80032f4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_SPI_TransmitReceive+0x1fc>
 8003202:	8b7b      	ldrh	r3, [r7, #26]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d16b      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	330c      	adds	r3, #12
 8003212:	7812      	ldrb	r2, [r2, #0]
 8003214:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321a:	1c5a      	adds	r2, r3, #1
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800322e:	e057      	b.n	80032e0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b02      	cmp	r3, #2
 800323c:	d11c      	bne.n	8003278 <HAL_SPI_TransmitReceive+0x26c>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003242:	b29b      	uxth	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d017      	beq.n	8003278 <HAL_SPI_TransmitReceive+0x26c>
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	2b01      	cmp	r3, #1
 800324c:	d114      	bne.n	8003278 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	330c      	adds	r3, #12
 8003258:	7812      	ldrb	r2, [r2, #0]
 800325a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003260:	1c5a      	adds	r2, r3, #1
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003274:	2300      	movs	r3, #0
 8003276:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d119      	bne.n	80032ba <HAL_SPI_TransmitReceive+0x2ae>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d014      	beq.n	80032ba <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a2:	1c5a      	adds	r2, r3, #1
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032b6:	2301      	movs	r3, #1
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80032ba:	f7fe fb25 	bl	8001908 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d803      	bhi.n	80032d2 <HAL_SPI_TransmitReceive+0x2c6>
 80032ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d102      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x2cc>
 80032d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d103      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80032de:	e029      	b.n	8003334 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1a2      	bne.n	8003230 <HAL_SPI_TransmitReceive+0x224>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d19d      	bne.n	8003230 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80032f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 f925 	bl	8003548 <SPI_EndRxTxTransaction>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d006      	beq.n	8003312 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003310:	e010      	b.n	8003334 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	e000      	b.n	8003334 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003332:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003344:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003348:	4618      	mov	r0, r3
 800334a:	3730      	adds	r7, #48	; 0x30
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800335e:	b2db      	uxtb	r3, r3
}
 8003360:	4618      	mov	r0, r3
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	603b      	str	r3, [r7, #0]
 8003378:	4613      	mov	r3, r2
 800337a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800337c:	f7fe fac4 	bl	8001908 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	4413      	add	r3, r2
 800338a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800338c:	f7fe fabc 	bl	8001908 <HAL_GetTick>
 8003390:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003392:	4b39      	ldr	r3, [pc, #228]	; (8003478 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	015b      	lsls	r3, r3, #5
 8003398:	0d1b      	lsrs	r3, r3, #20
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	fb02 f303 	mul.w	r3, r2, r3
 80033a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033a2:	e054      	b.n	800344e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d050      	beq.n	800344e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033ac:	f7fe faac 	bl	8001908 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	69fa      	ldr	r2, [r7, #28]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d902      	bls.n	80033c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d13d      	bne.n	800343e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685a      	ldr	r2, [r3, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033da:	d111      	bne.n	8003400 <SPI_WaitFlagStateUntilTimeout+0x94>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033e4:	d004      	beq.n	80033f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ee:	d107      	bne.n	8003400 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003408:	d10f      	bne.n	800342a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003428:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e017      	b.n	800346e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	3b01      	subs	r3, #1
 800344c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	4013      	ands	r3, r2
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	429a      	cmp	r2, r3
 800345c:	bf0c      	ite	eq
 800345e:	2301      	moveq	r3, #1
 8003460:	2300      	movne	r3, #0
 8003462:	b2db      	uxtb	r3, r3
 8003464:	461a      	mov	r2, r3
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	429a      	cmp	r2, r3
 800346a:	d19b      	bne.n	80033a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3720      	adds	r7, #32
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20000000 	.word	0x20000000

0800347c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af02      	add	r7, sp, #8
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003490:	d111      	bne.n	80034b6 <SPI_EndRxTransaction+0x3a>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349a:	d004      	beq.n	80034a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034a4:	d107      	bne.n	80034b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034be:	d12a      	bne.n	8003516 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c8:	d012      	beq.n	80034f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	9300      	str	r3, [sp, #0]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2200      	movs	r2, #0
 80034d2:	2180      	movs	r1, #128	; 0x80
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f7ff ff49 	bl	800336c <SPI_WaitFlagStateUntilTimeout>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d02d      	beq.n	800353c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e026      	b.n	800353e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2200      	movs	r2, #0
 80034f8:	2101      	movs	r1, #1
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f7ff ff36 	bl	800336c <SPI_WaitFlagStateUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d01a      	beq.n	800353c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800350a:	f043 0220 	orr.w	r2, r3, #32
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e013      	b.n	800353e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2200      	movs	r2, #0
 800351e:	2101      	movs	r1, #1
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f7ff ff23 	bl	800336c <SPI_WaitFlagStateUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d007      	beq.n	800353c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003530:	f043 0220 	orr.w	r2, r3, #32
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e000      	b.n	800353e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3710      	adds	r7, #16
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b088      	sub	sp, #32
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003554:	4b1b      	ldr	r3, [pc, #108]	; (80035c4 <SPI_EndRxTxTransaction+0x7c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a1b      	ldr	r2, [pc, #108]	; (80035c8 <SPI_EndRxTxTransaction+0x80>)
 800355a:	fba2 2303 	umull	r2, r3, r2, r3
 800355e:	0d5b      	lsrs	r3, r3, #21
 8003560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003564:	fb02 f303 	mul.w	r3, r2, r3
 8003568:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003572:	d112      	bne.n	800359a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	9300      	str	r3, [sp, #0]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2200      	movs	r2, #0
 800357c:	2180      	movs	r1, #128	; 0x80
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f7ff fef4 	bl	800336c <SPI_WaitFlagStateUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d016      	beq.n	80035b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358e:	f043 0220 	orr.w	r2, r3, #32
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e00f      	b.n	80035ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b80      	cmp	r3, #128	; 0x80
 80035b2:	d0f2      	beq.n	800359a <SPI_EndRxTxTransaction+0x52>
 80035b4:	e000      	b.n	80035b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80035b6:	bf00      	nop
  }

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000000 	.word	0x20000000
 80035c8:	165e9f81 	.word	0x165e9f81

080035cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e03f      	b.n	800365e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d106      	bne.n	80035f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f7fe f83e 	bl	8001674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2224      	movs	r2, #36	; 0x24
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800360e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f929 	bl	8003868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003624:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003634:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68da      	ldr	r2, [r3, #12]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003644:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b08a      	sub	sp, #40	; 0x28
 800366a:	af02      	add	r7, sp, #8
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	4613      	mov	r3, r2
 8003674:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b20      	cmp	r3, #32
 8003684:	d17c      	bne.n	8003780 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <HAL_UART_Transmit+0x2c>
 800368c:	88fb      	ldrh	r3, [r7, #6]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e075      	b.n	8003782 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d101      	bne.n	80036a4 <HAL_UART_Transmit+0x3e>
 80036a0:	2302      	movs	r3, #2
 80036a2:	e06e      	b.n	8003782 <HAL_UART_Transmit+0x11c>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2221      	movs	r2, #33	; 0x21
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ba:	f7fe f925 	bl	8001908 <HAL_GetTick>
 80036be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	88fa      	ldrh	r2, [r7, #6]
 80036c4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	88fa      	ldrh	r2, [r7, #6]
 80036ca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036d4:	d108      	bne.n	80036e8 <HAL_UART_Transmit+0x82>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d104      	bne.n	80036e8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	61bb      	str	r3, [r7, #24]
 80036e6:	e003      	b.n	80036f0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80036f8:	e02a      	b.n	8003750 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2200      	movs	r2, #0
 8003702:	2180      	movs	r1, #128	; 0x80
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 f840 	bl	800378a <UART_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e036      	b.n	8003782 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10b      	bne.n	8003732 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003728:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	3302      	adds	r3, #2
 800372e:	61bb      	str	r3, [r7, #24]
 8003730:	e007      	b.n	8003742 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	781a      	ldrb	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	3301      	adds	r3, #1
 8003740:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003754:	b29b      	uxth	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1cf      	bne.n	80036fa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	9300      	str	r3, [sp, #0]
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2200      	movs	r2, #0
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f810 	bl	800378a <UART_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d001      	beq.n	8003774 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e006      	b.n	8003782 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800377c:	2300      	movs	r3, #0
 800377e:	e000      	b.n	8003782 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
  }
}
 8003782:	4618      	mov	r0, r3
 8003784:	3720      	adds	r7, #32
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b090      	sub	sp, #64	; 0x40
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	603b      	str	r3, [r7, #0]
 8003796:	4613      	mov	r3, r2
 8003798:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800379a:	e050      	b.n	800383e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a2:	d04c      	beq.n	800383e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <UART_WaitOnFlagUntilTimeout+0x30>
 80037aa:	f7fe f8ad 	bl	8001908 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d241      	bcs.n	800383e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	330c      	adds	r3, #12
 80037d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80037da:	637a      	str	r2, [r7, #52]	; 0x34
 80037dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e5      	bne.n	80037ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3314      	adds	r3, #20
 80037f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	613b      	str	r3, [r7, #16]
   return(result);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	63bb      	str	r3, [r7, #56]	; 0x38
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3314      	adds	r3, #20
 800380c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800380e:	623a      	str	r2, [r7, #32]
 8003810:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003812:	69f9      	ldr	r1, [r7, #28]
 8003814:	6a3a      	ldr	r2, [r7, #32]
 8003816:	e841 2300 	strex	r3, r2, [r1]
 800381a:	61bb      	str	r3, [r7, #24]
   return(result);
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e5      	bne.n	80037ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e00f      	b.n	800385e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	4013      	ands	r3, r2
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	429a      	cmp	r2, r3
 800384c:	bf0c      	ite	eq
 800384e:	2301      	moveq	r3, #1
 8003850:	2300      	movne	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	79fb      	ldrb	r3, [r7, #7]
 8003858:	429a      	cmp	r2, r3
 800385a:	d09f      	beq.n	800379c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3740      	adds	r7, #64	; 0x40
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800386c:	b0c0      	sub	sp, #256	; 0x100
 800386e:	af00      	add	r7, sp, #0
 8003870:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003884:	68d9      	ldr	r1, [r3, #12]
 8003886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	ea40 0301 	orr.w	r3, r0, r1
 8003890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	431a      	orrs	r2, r3
 80038a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80038c0:	f021 010c 	bic.w	r1, r1, #12
 80038c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80038ce:	430b      	orrs	r3, r1
 80038d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e2:	6999      	ldr	r1, [r3, #24]
 80038e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	ea40 0301 	orr.w	r3, r0, r1
 80038ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4b8f      	ldr	r3, [pc, #572]	; (8003b34 <UART_SetConfig+0x2cc>)
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d005      	beq.n	8003908 <UART_SetConfig+0xa0>
 80038fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	4b8d      	ldr	r3, [pc, #564]	; (8003b38 <UART_SetConfig+0x2d0>)
 8003904:	429a      	cmp	r2, r3
 8003906:	d104      	bne.n	8003912 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003908:	f7fe fbc8 	bl	800209c <HAL_RCC_GetPCLK2Freq>
 800390c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003910:	e003      	b.n	800391a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003912:	f7fe fbaf 	bl	8002074 <HAL_RCC_GetPCLK1Freq>
 8003916:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800391a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003924:	f040 810c 	bne.w	8003b40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800392c:	2200      	movs	r2, #0
 800392e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003932:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003936:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800393a:	4622      	mov	r2, r4
 800393c:	462b      	mov	r3, r5
 800393e:	1891      	adds	r1, r2, r2
 8003940:	65b9      	str	r1, [r7, #88]	; 0x58
 8003942:	415b      	adcs	r3, r3
 8003944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003946:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800394a:	4621      	mov	r1, r4
 800394c:	eb12 0801 	adds.w	r8, r2, r1
 8003950:	4629      	mov	r1, r5
 8003952:	eb43 0901 	adc.w	r9, r3, r1
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800396a:	4690      	mov	r8, r2
 800396c:	4699      	mov	r9, r3
 800396e:	4623      	mov	r3, r4
 8003970:	eb18 0303 	adds.w	r3, r8, r3
 8003974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003978:	462b      	mov	r3, r5
 800397a:	eb49 0303 	adc.w	r3, r9, r3
 800397e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800398e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003992:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003996:	460b      	mov	r3, r1
 8003998:	18db      	adds	r3, r3, r3
 800399a:	653b      	str	r3, [r7, #80]	; 0x50
 800399c:	4613      	mov	r3, r2
 800399e:	eb42 0303 	adc.w	r3, r2, r3
 80039a2:	657b      	str	r3, [r7, #84]	; 0x54
 80039a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80039a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80039ac:	f7fc fc80 	bl	80002b0 <__aeabi_uldivmod>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4b61      	ldr	r3, [pc, #388]	; (8003b3c <UART_SetConfig+0x2d4>)
 80039b6:	fba3 2302 	umull	r2, r3, r3, r2
 80039ba:	095b      	lsrs	r3, r3, #5
 80039bc:	011c      	lsls	r4, r3, #4
 80039be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039c2:	2200      	movs	r2, #0
 80039c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80039c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80039cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039d0:	4642      	mov	r2, r8
 80039d2:	464b      	mov	r3, r9
 80039d4:	1891      	adds	r1, r2, r2
 80039d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80039d8:	415b      	adcs	r3, r3
 80039da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039e0:	4641      	mov	r1, r8
 80039e2:	eb12 0a01 	adds.w	sl, r2, r1
 80039e6:	4649      	mov	r1, r9
 80039e8:	eb43 0b01 	adc.w	fp, r3, r1
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a00:	4692      	mov	sl, r2
 8003a02:	469b      	mov	fp, r3
 8003a04:	4643      	mov	r3, r8
 8003a06:	eb1a 0303 	adds.w	r3, sl, r3
 8003a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a0e:	464b      	mov	r3, r9
 8003a10:	eb4b 0303 	adc.w	r3, fp, r3
 8003a14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003a28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	18db      	adds	r3, r3, r3
 8003a30:	643b      	str	r3, [r7, #64]	; 0x40
 8003a32:	4613      	mov	r3, r2
 8003a34:	eb42 0303 	adc.w	r3, r2, r3
 8003a38:	647b      	str	r3, [r7, #68]	; 0x44
 8003a3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a42:	f7fc fc35 	bl	80002b0 <__aeabi_uldivmod>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	4b3b      	ldr	r3, [pc, #236]	; (8003b3c <UART_SetConfig+0x2d4>)
 8003a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	2264      	movs	r2, #100	; 0x64
 8003a56:	fb02 f303 	mul.w	r3, r2, r3
 8003a5a:	1acb      	subs	r3, r1, r3
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a62:	4b36      	ldr	r3, [pc, #216]	; (8003b3c <UART_SetConfig+0x2d4>)
 8003a64:	fba3 2302 	umull	r2, r3, r3, r2
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a70:	441c      	add	r4, r3
 8003a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a76:	2200      	movs	r2, #0
 8003a78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a84:	4642      	mov	r2, r8
 8003a86:	464b      	mov	r3, r9
 8003a88:	1891      	adds	r1, r2, r2
 8003a8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a8c:	415b      	adcs	r3, r3
 8003a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a94:	4641      	mov	r1, r8
 8003a96:	1851      	adds	r1, r2, r1
 8003a98:	6339      	str	r1, [r7, #48]	; 0x30
 8003a9a:	4649      	mov	r1, r9
 8003a9c:	414b      	adcs	r3, r1
 8003a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003aac:	4659      	mov	r1, fp
 8003aae:	00cb      	lsls	r3, r1, #3
 8003ab0:	4651      	mov	r1, sl
 8003ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ab6:	4651      	mov	r1, sl
 8003ab8:	00ca      	lsls	r2, r1, #3
 8003aba:	4610      	mov	r0, r2
 8003abc:	4619      	mov	r1, r3
 8003abe:	4603      	mov	r3, r0
 8003ac0:	4642      	mov	r2, r8
 8003ac2:	189b      	adds	r3, r3, r2
 8003ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ac8:	464b      	mov	r3, r9
 8003aca:	460a      	mov	r2, r1
 8003acc:	eb42 0303 	adc.w	r3, r2, r3
 8003ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ae0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ae4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ae8:	460b      	mov	r3, r1
 8003aea:	18db      	adds	r3, r3, r3
 8003aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8003aee:	4613      	mov	r3, r2
 8003af0:	eb42 0303 	adc.w	r3, r2, r3
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003afa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003afe:	f7fc fbd7 	bl	80002b0 <__aeabi_uldivmod>
 8003b02:	4602      	mov	r2, r0
 8003b04:	460b      	mov	r3, r1
 8003b06:	4b0d      	ldr	r3, [pc, #52]	; (8003b3c <UART_SetConfig+0x2d4>)
 8003b08:	fba3 1302 	umull	r1, r3, r3, r2
 8003b0c:	095b      	lsrs	r3, r3, #5
 8003b0e:	2164      	movs	r1, #100	; 0x64
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	3332      	adds	r3, #50	; 0x32
 8003b1a:	4a08      	ldr	r2, [pc, #32]	; (8003b3c <UART_SetConfig+0x2d4>)
 8003b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	f003 0207 	and.w	r2, r3, #7
 8003b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4422      	add	r2, r4
 8003b2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b30:	e105      	b.n	8003d3e <UART_SetConfig+0x4d6>
 8003b32:	bf00      	nop
 8003b34:	40011000 	.word	0x40011000
 8003b38:	40011400 	.word	0x40011400
 8003b3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b44:	2200      	movs	r2, #0
 8003b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b52:	4642      	mov	r2, r8
 8003b54:	464b      	mov	r3, r9
 8003b56:	1891      	adds	r1, r2, r2
 8003b58:	6239      	str	r1, [r7, #32]
 8003b5a:	415b      	adcs	r3, r3
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b62:	4641      	mov	r1, r8
 8003b64:	1854      	adds	r4, r2, r1
 8003b66:	4649      	mov	r1, r9
 8003b68:	eb43 0501 	adc.w	r5, r3, r1
 8003b6c:	f04f 0200 	mov.w	r2, #0
 8003b70:	f04f 0300 	mov.w	r3, #0
 8003b74:	00eb      	lsls	r3, r5, #3
 8003b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b7a:	00e2      	lsls	r2, r4, #3
 8003b7c:	4614      	mov	r4, r2
 8003b7e:	461d      	mov	r5, r3
 8003b80:	4643      	mov	r3, r8
 8003b82:	18e3      	adds	r3, r4, r3
 8003b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b88:	464b      	mov	r3, r9
 8003b8a:	eb45 0303 	adc.w	r3, r5, r3
 8003b8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003bae:	4629      	mov	r1, r5
 8003bb0:	008b      	lsls	r3, r1, #2
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bb8:	4621      	mov	r1, r4
 8003bba:	008a      	lsls	r2, r1, #2
 8003bbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003bc0:	f7fc fb76 	bl	80002b0 <__aeabi_uldivmod>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4b60      	ldr	r3, [pc, #384]	; (8003d4c <UART_SetConfig+0x4e4>)
 8003bca:	fba3 2302 	umull	r2, r3, r3, r2
 8003bce:	095b      	lsrs	r3, r3, #5
 8003bd0:	011c      	lsls	r4, r3, #4
 8003bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003be0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003be4:	4642      	mov	r2, r8
 8003be6:	464b      	mov	r3, r9
 8003be8:	1891      	adds	r1, r2, r2
 8003bea:	61b9      	str	r1, [r7, #24]
 8003bec:	415b      	adcs	r3, r3
 8003bee:	61fb      	str	r3, [r7, #28]
 8003bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf4:	4641      	mov	r1, r8
 8003bf6:	1851      	adds	r1, r2, r1
 8003bf8:	6139      	str	r1, [r7, #16]
 8003bfa:	4649      	mov	r1, r9
 8003bfc:	414b      	adcs	r3, r1
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	00cb      	lsls	r3, r1, #3
 8003c10:	4651      	mov	r1, sl
 8003c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c16:	4651      	mov	r1, sl
 8003c18:	00ca      	lsls	r2, r1, #3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4603      	mov	r3, r0
 8003c20:	4642      	mov	r2, r8
 8003c22:	189b      	adds	r3, r3, r2
 8003c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c28:	464b      	mov	r3, r9
 8003c2a:	460a      	mov	r2, r1
 8003c2c:	eb42 0303 	adc.w	r3, r2, r3
 8003c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c4c:	4649      	mov	r1, r9
 8003c4e:	008b      	lsls	r3, r1, #2
 8003c50:	4641      	mov	r1, r8
 8003c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c56:	4641      	mov	r1, r8
 8003c58:	008a      	lsls	r2, r1, #2
 8003c5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c5e:	f7fc fb27 	bl	80002b0 <__aeabi_uldivmod>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <UART_SetConfig+0x4e4>)
 8003c68:	fba3 1302 	umull	r1, r3, r3, r2
 8003c6c:	095b      	lsrs	r3, r3, #5
 8003c6e:	2164      	movs	r1, #100	; 0x64
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	3332      	adds	r3, #50	; 0x32
 8003c7a:	4a34      	ldr	r2, [pc, #208]	; (8003d4c <UART_SetConfig+0x4e4>)
 8003c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c80:	095b      	lsrs	r3, r3, #5
 8003c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c86:	441c      	add	r4, r3
 8003c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	673b      	str	r3, [r7, #112]	; 0x70
 8003c90:	677a      	str	r2, [r7, #116]	; 0x74
 8003c92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c96:	4642      	mov	r2, r8
 8003c98:	464b      	mov	r3, r9
 8003c9a:	1891      	adds	r1, r2, r2
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	415b      	adcs	r3, r3
 8003ca0:	60fb      	str	r3, [r7, #12]
 8003ca2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ca6:	4641      	mov	r1, r8
 8003ca8:	1851      	adds	r1, r2, r1
 8003caa:	6039      	str	r1, [r7, #0]
 8003cac:	4649      	mov	r1, r9
 8003cae:	414b      	adcs	r3, r1
 8003cb0:	607b      	str	r3, [r7, #4]
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003cbe:	4659      	mov	r1, fp
 8003cc0:	00cb      	lsls	r3, r1, #3
 8003cc2:	4651      	mov	r1, sl
 8003cc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cc8:	4651      	mov	r1, sl
 8003cca:	00ca      	lsls	r2, r1, #3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	4619      	mov	r1, r3
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	4642      	mov	r2, r8
 8003cd4:	189b      	adds	r3, r3, r2
 8003cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cd8:	464b      	mov	r3, r9
 8003cda:	460a      	mov	r2, r1
 8003cdc:	eb42 0303 	adc.w	r3, r2, r3
 8003ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	663b      	str	r3, [r7, #96]	; 0x60
 8003cec:	667a      	str	r2, [r7, #100]	; 0x64
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	008b      	lsls	r3, r1, #2
 8003cfe:	4641      	mov	r1, r8
 8003d00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d04:	4641      	mov	r1, r8
 8003d06:	008a      	lsls	r2, r1, #2
 8003d08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003d0c:	f7fc fad0 	bl	80002b0 <__aeabi_uldivmod>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4b0d      	ldr	r3, [pc, #52]	; (8003d4c <UART_SetConfig+0x4e4>)
 8003d16:	fba3 1302 	umull	r1, r3, r3, r2
 8003d1a:	095b      	lsrs	r3, r3, #5
 8003d1c:	2164      	movs	r1, #100	; 0x64
 8003d1e:	fb01 f303 	mul.w	r3, r1, r3
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	3332      	adds	r3, #50	; 0x32
 8003d28:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <UART_SetConfig+0x4e4>)
 8003d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d2e:	095b      	lsrs	r3, r3, #5
 8003d30:	f003 020f 	and.w	r2, r3, #15
 8003d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4422      	add	r2, r4
 8003d3c:	609a      	str	r2, [r3, #8]
}
 8003d3e:	bf00      	nop
 8003d40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d44:	46bd      	mov	sp, r7
 8003d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d4a:	bf00      	nop
 8003d4c:	51eb851f 	.word	0x51eb851f

08003d50 <__errno>:
 8003d50:	4b01      	ldr	r3, [pc, #4]	; (8003d58 <__errno+0x8>)
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	2000000c 	.word	0x2000000c

08003d5c <__libc_init_array>:
 8003d5c:	b570      	push	{r4, r5, r6, lr}
 8003d5e:	4d0d      	ldr	r5, [pc, #52]	; (8003d94 <__libc_init_array+0x38>)
 8003d60:	4c0d      	ldr	r4, [pc, #52]	; (8003d98 <__libc_init_array+0x3c>)
 8003d62:	1b64      	subs	r4, r4, r5
 8003d64:	10a4      	asrs	r4, r4, #2
 8003d66:	2600      	movs	r6, #0
 8003d68:	42a6      	cmp	r6, r4
 8003d6a:	d109      	bne.n	8003d80 <__libc_init_array+0x24>
 8003d6c:	4d0b      	ldr	r5, [pc, #44]	; (8003d9c <__libc_init_array+0x40>)
 8003d6e:	4c0c      	ldr	r4, [pc, #48]	; (8003da0 <__libc_init_array+0x44>)
 8003d70:	f000 fc8e 	bl	8004690 <_init>
 8003d74:	1b64      	subs	r4, r4, r5
 8003d76:	10a4      	asrs	r4, r4, #2
 8003d78:	2600      	movs	r6, #0
 8003d7a:	42a6      	cmp	r6, r4
 8003d7c:	d105      	bne.n	8003d8a <__libc_init_array+0x2e>
 8003d7e:	bd70      	pop	{r4, r5, r6, pc}
 8003d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d84:	4798      	blx	r3
 8003d86:	3601      	adds	r6, #1
 8003d88:	e7ee      	b.n	8003d68 <__libc_init_array+0xc>
 8003d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d8e:	4798      	blx	r3
 8003d90:	3601      	adds	r6, #1
 8003d92:	e7f2      	b.n	8003d7a <__libc_init_array+0x1e>
 8003d94:	0800480c 	.word	0x0800480c
 8003d98:	0800480c 	.word	0x0800480c
 8003d9c:	0800480c 	.word	0x0800480c
 8003da0:	08004810 	.word	0x08004810

08003da4 <memset>:
 8003da4:	4402      	add	r2, r0
 8003da6:	4603      	mov	r3, r0
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d100      	bne.n	8003dae <memset+0xa>
 8003dac:	4770      	bx	lr
 8003dae:	f803 1b01 	strb.w	r1, [r3], #1
 8003db2:	e7f9      	b.n	8003da8 <memset+0x4>

08003db4 <_vsiprintf_r>:
 8003db4:	b500      	push	{lr}
 8003db6:	b09b      	sub	sp, #108	; 0x6c
 8003db8:	9100      	str	r1, [sp, #0]
 8003dba:	9104      	str	r1, [sp, #16]
 8003dbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003dc0:	9105      	str	r1, [sp, #20]
 8003dc2:	9102      	str	r1, [sp, #8]
 8003dc4:	4905      	ldr	r1, [pc, #20]	; (8003ddc <_vsiprintf_r+0x28>)
 8003dc6:	9103      	str	r1, [sp, #12]
 8003dc8:	4669      	mov	r1, sp
 8003dca:	f000 f86f 	bl	8003eac <_svfiprintf_r>
 8003dce:	9b00      	ldr	r3, [sp, #0]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	701a      	strb	r2, [r3, #0]
 8003dd4:	b01b      	add	sp, #108	; 0x6c
 8003dd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003dda:	bf00      	nop
 8003ddc:	ffff0208 	.word	0xffff0208

08003de0 <vsiprintf>:
 8003de0:	4613      	mov	r3, r2
 8003de2:	460a      	mov	r2, r1
 8003de4:	4601      	mov	r1, r0
 8003de6:	4802      	ldr	r0, [pc, #8]	; (8003df0 <vsiprintf+0x10>)
 8003de8:	6800      	ldr	r0, [r0, #0]
 8003dea:	f7ff bfe3 	b.w	8003db4 <_vsiprintf_r>
 8003dee:	bf00      	nop
 8003df0:	2000000c 	.word	0x2000000c

08003df4 <__ssputs_r>:
 8003df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003df8:	688e      	ldr	r6, [r1, #8]
 8003dfa:	429e      	cmp	r6, r3
 8003dfc:	4682      	mov	sl, r0
 8003dfe:	460c      	mov	r4, r1
 8003e00:	4690      	mov	r8, r2
 8003e02:	461f      	mov	r7, r3
 8003e04:	d838      	bhi.n	8003e78 <__ssputs_r+0x84>
 8003e06:	898a      	ldrh	r2, [r1, #12]
 8003e08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e0c:	d032      	beq.n	8003e74 <__ssputs_r+0x80>
 8003e0e:	6825      	ldr	r5, [r4, #0]
 8003e10:	6909      	ldr	r1, [r1, #16]
 8003e12:	eba5 0901 	sub.w	r9, r5, r1
 8003e16:	6965      	ldr	r5, [r4, #20]
 8003e18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e20:	3301      	adds	r3, #1
 8003e22:	444b      	add	r3, r9
 8003e24:	106d      	asrs	r5, r5, #1
 8003e26:	429d      	cmp	r5, r3
 8003e28:	bf38      	it	cc
 8003e2a:	461d      	movcc	r5, r3
 8003e2c:	0553      	lsls	r3, r2, #21
 8003e2e:	d531      	bpl.n	8003e94 <__ssputs_r+0xa0>
 8003e30:	4629      	mov	r1, r5
 8003e32:	f000 fb63 	bl	80044fc <_malloc_r>
 8003e36:	4606      	mov	r6, r0
 8003e38:	b950      	cbnz	r0, 8003e50 <__ssputs_r+0x5c>
 8003e3a:	230c      	movs	r3, #12
 8003e3c:	f8ca 3000 	str.w	r3, [sl]
 8003e40:	89a3      	ldrh	r3, [r4, #12]
 8003e42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e46:	81a3      	strh	r3, [r4, #12]
 8003e48:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e50:	6921      	ldr	r1, [r4, #16]
 8003e52:	464a      	mov	r2, r9
 8003e54:	f000 fabe 	bl	80043d4 <memcpy>
 8003e58:	89a3      	ldrh	r3, [r4, #12]
 8003e5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e62:	81a3      	strh	r3, [r4, #12]
 8003e64:	6126      	str	r6, [r4, #16]
 8003e66:	6165      	str	r5, [r4, #20]
 8003e68:	444e      	add	r6, r9
 8003e6a:	eba5 0509 	sub.w	r5, r5, r9
 8003e6e:	6026      	str	r6, [r4, #0]
 8003e70:	60a5      	str	r5, [r4, #8]
 8003e72:	463e      	mov	r6, r7
 8003e74:	42be      	cmp	r6, r7
 8003e76:	d900      	bls.n	8003e7a <__ssputs_r+0x86>
 8003e78:	463e      	mov	r6, r7
 8003e7a:	6820      	ldr	r0, [r4, #0]
 8003e7c:	4632      	mov	r2, r6
 8003e7e:	4641      	mov	r1, r8
 8003e80:	f000 fab6 	bl	80043f0 <memmove>
 8003e84:	68a3      	ldr	r3, [r4, #8]
 8003e86:	1b9b      	subs	r3, r3, r6
 8003e88:	60a3      	str	r3, [r4, #8]
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	4433      	add	r3, r6
 8003e8e:	6023      	str	r3, [r4, #0]
 8003e90:	2000      	movs	r0, #0
 8003e92:	e7db      	b.n	8003e4c <__ssputs_r+0x58>
 8003e94:	462a      	mov	r2, r5
 8003e96:	f000 fba5 	bl	80045e4 <_realloc_r>
 8003e9a:	4606      	mov	r6, r0
 8003e9c:	2800      	cmp	r0, #0
 8003e9e:	d1e1      	bne.n	8003e64 <__ssputs_r+0x70>
 8003ea0:	6921      	ldr	r1, [r4, #16]
 8003ea2:	4650      	mov	r0, sl
 8003ea4:	f000 fabe 	bl	8004424 <_free_r>
 8003ea8:	e7c7      	b.n	8003e3a <__ssputs_r+0x46>
	...

08003eac <_svfiprintf_r>:
 8003eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb0:	4698      	mov	r8, r3
 8003eb2:	898b      	ldrh	r3, [r1, #12]
 8003eb4:	061b      	lsls	r3, r3, #24
 8003eb6:	b09d      	sub	sp, #116	; 0x74
 8003eb8:	4607      	mov	r7, r0
 8003eba:	460d      	mov	r5, r1
 8003ebc:	4614      	mov	r4, r2
 8003ebe:	d50e      	bpl.n	8003ede <_svfiprintf_r+0x32>
 8003ec0:	690b      	ldr	r3, [r1, #16]
 8003ec2:	b963      	cbnz	r3, 8003ede <_svfiprintf_r+0x32>
 8003ec4:	2140      	movs	r1, #64	; 0x40
 8003ec6:	f000 fb19 	bl	80044fc <_malloc_r>
 8003eca:	6028      	str	r0, [r5, #0]
 8003ecc:	6128      	str	r0, [r5, #16]
 8003ece:	b920      	cbnz	r0, 8003eda <_svfiprintf_r+0x2e>
 8003ed0:	230c      	movs	r3, #12
 8003ed2:	603b      	str	r3, [r7, #0]
 8003ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed8:	e0d1      	b.n	800407e <_svfiprintf_r+0x1d2>
 8003eda:	2340      	movs	r3, #64	; 0x40
 8003edc:	616b      	str	r3, [r5, #20]
 8003ede:	2300      	movs	r3, #0
 8003ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8003ee2:	2320      	movs	r3, #32
 8003ee4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003ee8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003eec:	2330      	movs	r3, #48	; 0x30
 8003eee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004098 <_svfiprintf_r+0x1ec>
 8003ef2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ef6:	f04f 0901 	mov.w	r9, #1
 8003efa:	4623      	mov	r3, r4
 8003efc:	469a      	mov	sl, r3
 8003efe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f02:	b10a      	cbz	r2, 8003f08 <_svfiprintf_r+0x5c>
 8003f04:	2a25      	cmp	r2, #37	; 0x25
 8003f06:	d1f9      	bne.n	8003efc <_svfiprintf_r+0x50>
 8003f08:	ebba 0b04 	subs.w	fp, sl, r4
 8003f0c:	d00b      	beq.n	8003f26 <_svfiprintf_r+0x7a>
 8003f0e:	465b      	mov	r3, fp
 8003f10:	4622      	mov	r2, r4
 8003f12:	4629      	mov	r1, r5
 8003f14:	4638      	mov	r0, r7
 8003f16:	f7ff ff6d 	bl	8003df4 <__ssputs_r>
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	f000 80aa 	beq.w	8004074 <_svfiprintf_r+0x1c8>
 8003f20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f22:	445a      	add	r2, fp
 8003f24:	9209      	str	r2, [sp, #36]	; 0x24
 8003f26:	f89a 3000 	ldrb.w	r3, [sl]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 80a2 	beq.w	8004074 <_svfiprintf_r+0x1c8>
 8003f30:	2300      	movs	r3, #0
 8003f32:	f04f 32ff 	mov.w	r2, #4294967295
 8003f36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f3a:	f10a 0a01 	add.w	sl, sl, #1
 8003f3e:	9304      	str	r3, [sp, #16]
 8003f40:	9307      	str	r3, [sp, #28]
 8003f42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f46:	931a      	str	r3, [sp, #104]	; 0x68
 8003f48:	4654      	mov	r4, sl
 8003f4a:	2205      	movs	r2, #5
 8003f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f50:	4851      	ldr	r0, [pc, #324]	; (8004098 <_svfiprintf_r+0x1ec>)
 8003f52:	f7fc f95d 	bl	8000210 <memchr>
 8003f56:	9a04      	ldr	r2, [sp, #16]
 8003f58:	b9d8      	cbnz	r0, 8003f92 <_svfiprintf_r+0xe6>
 8003f5a:	06d0      	lsls	r0, r2, #27
 8003f5c:	bf44      	itt	mi
 8003f5e:	2320      	movmi	r3, #32
 8003f60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f64:	0711      	lsls	r1, r2, #28
 8003f66:	bf44      	itt	mi
 8003f68:	232b      	movmi	r3, #43	; 0x2b
 8003f6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f72:	2b2a      	cmp	r3, #42	; 0x2a
 8003f74:	d015      	beq.n	8003fa2 <_svfiprintf_r+0xf6>
 8003f76:	9a07      	ldr	r2, [sp, #28]
 8003f78:	4654      	mov	r4, sl
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	f04f 0c0a 	mov.w	ip, #10
 8003f80:	4621      	mov	r1, r4
 8003f82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f86:	3b30      	subs	r3, #48	; 0x30
 8003f88:	2b09      	cmp	r3, #9
 8003f8a:	d94e      	bls.n	800402a <_svfiprintf_r+0x17e>
 8003f8c:	b1b0      	cbz	r0, 8003fbc <_svfiprintf_r+0x110>
 8003f8e:	9207      	str	r2, [sp, #28]
 8003f90:	e014      	b.n	8003fbc <_svfiprintf_r+0x110>
 8003f92:	eba0 0308 	sub.w	r3, r0, r8
 8003f96:	fa09 f303 	lsl.w	r3, r9, r3
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	9304      	str	r3, [sp, #16]
 8003f9e:	46a2      	mov	sl, r4
 8003fa0:	e7d2      	b.n	8003f48 <_svfiprintf_r+0x9c>
 8003fa2:	9b03      	ldr	r3, [sp, #12]
 8003fa4:	1d19      	adds	r1, r3, #4
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	9103      	str	r1, [sp, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	bfbb      	ittet	lt
 8003fae:	425b      	neglt	r3, r3
 8003fb0:	f042 0202 	orrlt.w	r2, r2, #2
 8003fb4:	9307      	strge	r3, [sp, #28]
 8003fb6:	9307      	strlt	r3, [sp, #28]
 8003fb8:	bfb8      	it	lt
 8003fba:	9204      	strlt	r2, [sp, #16]
 8003fbc:	7823      	ldrb	r3, [r4, #0]
 8003fbe:	2b2e      	cmp	r3, #46	; 0x2e
 8003fc0:	d10c      	bne.n	8003fdc <_svfiprintf_r+0x130>
 8003fc2:	7863      	ldrb	r3, [r4, #1]
 8003fc4:	2b2a      	cmp	r3, #42	; 0x2a
 8003fc6:	d135      	bne.n	8004034 <_svfiprintf_r+0x188>
 8003fc8:	9b03      	ldr	r3, [sp, #12]
 8003fca:	1d1a      	adds	r2, r3, #4
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	9203      	str	r2, [sp, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	bfb8      	it	lt
 8003fd4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003fd8:	3402      	adds	r4, #2
 8003fda:	9305      	str	r3, [sp, #20]
 8003fdc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040a8 <_svfiprintf_r+0x1fc>
 8003fe0:	7821      	ldrb	r1, [r4, #0]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	4650      	mov	r0, sl
 8003fe6:	f7fc f913 	bl	8000210 <memchr>
 8003fea:	b140      	cbz	r0, 8003ffe <_svfiprintf_r+0x152>
 8003fec:	2340      	movs	r3, #64	; 0x40
 8003fee:	eba0 000a 	sub.w	r0, r0, sl
 8003ff2:	fa03 f000 	lsl.w	r0, r3, r0
 8003ff6:	9b04      	ldr	r3, [sp, #16]
 8003ff8:	4303      	orrs	r3, r0
 8003ffa:	3401      	adds	r4, #1
 8003ffc:	9304      	str	r3, [sp, #16]
 8003ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004002:	4826      	ldr	r0, [pc, #152]	; (800409c <_svfiprintf_r+0x1f0>)
 8004004:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004008:	2206      	movs	r2, #6
 800400a:	f7fc f901 	bl	8000210 <memchr>
 800400e:	2800      	cmp	r0, #0
 8004010:	d038      	beq.n	8004084 <_svfiprintf_r+0x1d8>
 8004012:	4b23      	ldr	r3, [pc, #140]	; (80040a0 <_svfiprintf_r+0x1f4>)
 8004014:	bb1b      	cbnz	r3, 800405e <_svfiprintf_r+0x1b2>
 8004016:	9b03      	ldr	r3, [sp, #12]
 8004018:	3307      	adds	r3, #7
 800401a:	f023 0307 	bic.w	r3, r3, #7
 800401e:	3308      	adds	r3, #8
 8004020:	9303      	str	r3, [sp, #12]
 8004022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004024:	4433      	add	r3, r6
 8004026:	9309      	str	r3, [sp, #36]	; 0x24
 8004028:	e767      	b.n	8003efa <_svfiprintf_r+0x4e>
 800402a:	fb0c 3202 	mla	r2, ip, r2, r3
 800402e:	460c      	mov	r4, r1
 8004030:	2001      	movs	r0, #1
 8004032:	e7a5      	b.n	8003f80 <_svfiprintf_r+0xd4>
 8004034:	2300      	movs	r3, #0
 8004036:	3401      	adds	r4, #1
 8004038:	9305      	str	r3, [sp, #20]
 800403a:	4619      	mov	r1, r3
 800403c:	f04f 0c0a 	mov.w	ip, #10
 8004040:	4620      	mov	r0, r4
 8004042:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004046:	3a30      	subs	r2, #48	; 0x30
 8004048:	2a09      	cmp	r2, #9
 800404a:	d903      	bls.n	8004054 <_svfiprintf_r+0x1a8>
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0c5      	beq.n	8003fdc <_svfiprintf_r+0x130>
 8004050:	9105      	str	r1, [sp, #20]
 8004052:	e7c3      	b.n	8003fdc <_svfiprintf_r+0x130>
 8004054:	fb0c 2101 	mla	r1, ip, r1, r2
 8004058:	4604      	mov	r4, r0
 800405a:	2301      	movs	r3, #1
 800405c:	e7f0      	b.n	8004040 <_svfiprintf_r+0x194>
 800405e:	ab03      	add	r3, sp, #12
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	462a      	mov	r2, r5
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <_svfiprintf_r+0x1f8>)
 8004066:	a904      	add	r1, sp, #16
 8004068:	4638      	mov	r0, r7
 800406a:	f3af 8000 	nop.w
 800406e:	1c42      	adds	r2, r0, #1
 8004070:	4606      	mov	r6, r0
 8004072:	d1d6      	bne.n	8004022 <_svfiprintf_r+0x176>
 8004074:	89ab      	ldrh	r3, [r5, #12]
 8004076:	065b      	lsls	r3, r3, #25
 8004078:	f53f af2c 	bmi.w	8003ed4 <_svfiprintf_r+0x28>
 800407c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800407e:	b01d      	add	sp, #116	; 0x74
 8004080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004084:	ab03      	add	r3, sp, #12
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	462a      	mov	r2, r5
 800408a:	4b06      	ldr	r3, [pc, #24]	; (80040a4 <_svfiprintf_r+0x1f8>)
 800408c:	a904      	add	r1, sp, #16
 800408e:	4638      	mov	r0, r7
 8004090:	f000 f87a 	bl	8004188 <_printf_i>
 8004094:	e7eb      	b.n	800406e <_svfiprintf_r+0x1c2>
 8004096:	bf00      	nop
 8004098:	080047d0 	.word	0x080047d0
 800409c:	080047da 	.word	0x080047da
 80040a0:	00000000 	.word	0x00000000
 80040a4:	08003df5 	.word	0x08003df5
 80040a8:	080047d6 	.word	0x080047d6

080040ac <_printf_common>:
 80040ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b0:	4616      	mov	r6, r2
 80040b2:	4699      	mov	r9, r3
 80040b4:	688a      	ldr	r2, [r1, #8]
 80040b6:	690b      	ldr	r3, [r1, #16]
 80040b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040bc:	4293      	cmp	r3, r2
 80040be:	bfb8      	it	lt
 80040c0:	4613      	movlt	r3, r2
 80040c2:	6033      	str	r3, [r6, #0]
 80040c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040c8:	4607      	mov	r7, r0
 80040ca:	460c      	mov	r4, r1
 80040cc:	b10a      	cbz	r2, 80040d2 <_printf_common+0x26>
 80040ce:	3301      	adds	r3, #1
 80040d0:	6033      	str	r3, [r6, #0]
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	0699      	lsls	r1, r3, #26
 80040d6:	bf42      	ittt	mi
 80040d8:	6833      	ldrmi	r3, [r6, #0]
 80040da:	3302      	addmi	r3, #2
 80040dc:	6033      	strmi	r3, [r6, #0]
 80040de:	6825      	ldr	r5, [r4, #0]
 80040e0:	f015 0506 	ands.w	r5, r5, #6
 80040e4:	d106      	bne.n	80040f4 <_printf_common+0x48>
 80040e6:	f104 0a19 	add.w	sl, r4, #25
 80040ea:	68e3      	ldr	r3, [r4, #12]
 80040ec:	6832      	ldr	r2, [r6, #0]
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	42ab      	cmp	r3, r5
 80040f2:	dc26      	bgt.n	8004142 <_printf_common+0x96>
 80040f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040f8:	1e13      	subs	r3, r2, #0
 80040fa:	6822      	ldr	r2, [r4, #0]
 80040fc:	bf18      	it	ne
 80040fe:	2301      	movne	r3, #1
 8004100:	0692      	lsls	r2, r2, #26
 8004102:	d42b      	bmi.n	800415c <_printf_common+0xb0>
 8004104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004108:	4649      	mov	r1, r9
 800410a:	4638      	mov	r0, r7
 800410c:	47c0      	blx	r8
 800410e:	3001      	adds	r0, #1
 8004110:	d01e      	beq.n	8004150 <_printf_common+0xa4>
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	68e5      	ldr	r5, [r4, #12]
 8004116:	6832      	ldr	r2, [r6, #0]
 8004118:	f003 0306 	and.w	r3, r3, #6
 800411c:	2b04      	cmp	r3, #4
 800411e:	bf08      	it	eq
 8004120:	1aad      	subeq	r5, r5, r2
 8004122:	68a3      	ldr	r3, [r4, #8]
 8004124:	6922      	ldr	r2, [r4, #16]
 8004126:	bf0c      	ite	eq
 8004128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800412c:	2500      	movne	r5, #0
 800412e:	4293      	cmp	r3, r2
 8004130:	bfc4      	itt	gt
 8004132:	1a9b      	subgt	r3, r3, r2
 8004134:	18ed      	addgt	r5, r5, r3
 8004136:	2600      	movs	r6, #0
 8004138:	341a      	adds	r4, #26
 800413a:	42b5      	cmp	r5, r6
 800413c:	d11a      	bne.n	8004174 <_printf_common+0xc8>
 800413e:	2000      	movs	r0, #0
 8004140:	e008      	b.n	8004154 <_printf_common+0xa8>
 8004142:	2301      	movs	r3, #1
 8004144:	4652      	mov	r2, sl
 8004146:	4649      	mov	r1, r9
 8004148:	4638      	mov	r0, r7
 800414a:	47c0      	blx	r8
 800414c:	3001      	adds	r0, #1
 800414e:	d103      	bne.n	8004158 <_printf_common+0xac>
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004158:	3501      	adds	r5, #1
 800415a:	e7c6      	b.n	80040ea <_printf_common+0x3e>
 800415c:	18e1      	adds	r1, r4, r3
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	2030      	movs	r0, #48	; 0x30
 8004162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004166:	4422      	add	r2, r4
 8004168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800416c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004170:	3302      	adds	r3, #2
 8004172:	e7c7      	b.n	8004104 <_printf_common+0x58>
 8004174:	2301      	movs	r3, #1
 8004176:	4622      	mov	r2, r4
 8004178:	4649      	mov	r1, r9
 800417a:	4638      	mov	r0, r7
 800417c:	47c0      	blx	r8
 800417e:	3001      	adds	r0, #1
 8004180:	d0e6      	beq.n	8004150 <_printf_common+0xa4>
 8004182:	3601      	adds	r6, #1
 8004184:	e7d9      	b.n	800413a <_printf_common+0x8e>
	...

08004188 <_printf_i>:
 8004188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800418c:	7e0f      	ldrb	r7, [r1, #24]
 800418e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004190:	2f78      	cmp	r7, #120	; 0x78
 8004192:	4691      	mov	r9, r2
 8004194:	4680      	mov	r8, r0
 8004196:	460c      	mov	r4, r1
 8004198:	469a      	mov	sl, r3
 800419a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800419e:	d807      	bhi.n	80041b0 <_printf_i+0x28>
 80041a0:	2f62      	cmp	r7, #98	; 0x62
 80041a2:	d80a      	bhi.n	80041ba <_printf_i+0x32>
 80041a4:	2f00      	cmp	r7, #0
 80041a6:	f000 80d8 	beq.w	800435a <_printf_i+0x1d2>
 80041aa:	2f58      	cmp	r7, #88	; 0x58
 80041ac:	f000 80a3 	beq.w	80042f6 <_printf_i+0x16e>
 80041b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041b8:	e03a      	b.n	8004230 <_printf_i+0xa8>
 80041ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041be:	2b15      	cmp	r3, #21
 80041c0:	d8f6      	bhi.n	80041b0 <_printf_i+0x28>
 80041c2:	a101      	add	r1, pc, #4	; (adr r1, 80041c8 <_printf_i+0x40>)
 80041c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041c8:	08004221 	.word	0x08004221
 80041cc:	08004235 	.word	0x08004235
 80041d0:	080041b1 	.word	0x080041b1
 80041d4:	080041b1 	.word	0x080041b1
 80041d8:	080041b1 	.word	0x080041b1
 80041dc:	080041b1 	.word	0x080041b1
 80041e0:	08004235 	.word	0x08004235
 80041e4:	080041b1 	.word	0x080041b1
 80041e8:	080041b1 	.word	0x080041b1
 80041ec:	080041b1 	.word	0x080041b1
 80041f0:	080041b1 	.word	0x080041b1
 80041f4:	08004341 	.word	0x08004341
 80041f8:	08004265 	.word	0x08004265
 80041fc:	08004323 	.word	0x08004323
 8004200:	080041b1 	.word	0x080041b1
 8004204:	080041b1 	.word	0x080041b1
 8004208:	08004363 	.word	0x08004363
 800420c:	080041b1 	.word	0x080041b1
 8004210:	08004265 	.word	0x08004265
 8004214:	080041b1 	.word	0x080041b1
 8004218:	080041b1 	.word	0x080041b1
 800421c:	0800432b 	.word	0x0800432b
 8004220:	682b      	ldr	r3, [r5, #0]
 8004222:	1d1a      	adds	r2, r3, #4
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	602a      	str	r2, [r5, #0]
 8004228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800422c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004230:	2301      	movs	r3, #1
 8004232:	e0a3      	b.n	800437c <_printf_i+0x1f4>
 8004234:	6820      	ldr	r0, [r4, #0]
 8004236:	6829      	ldr	r1, [r5, #0]
 8004238:	0606      	lsls	r6, r0, #24
 800423a:	f101 0304 	add.w	r3, r1, #4
 800423e:	d50a      	bpl.n	8004256 <_printf_i+0xce>
 8004240:	680e      	ldr	r6, [r1, #0]
 8004242:	602b      	str	r3, [r5, #0]
 8004244:	2e00      	cmp	r6, #0
 8004246:	da03      	bge.n	8004250 <_printf_i+0xc8>
 8004248:	232d      	movs	r3, #45	; 0x2d
 800424a:	4276      	negs	r6, r6
 800424c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004250:	485e      	ldr	r0, [pc, #376]	; (80043cc <_printf_i+0x244>)
 8004252:	230a      	movs	r3, #10
 8004254:	e019      	b.n	800428a <_printf_i+0x102>
 8004256:	680e      	ldr	r6, [r1, #0]
 8004258:	602b      	str	r3, [r5, #0]
 800425a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800425e:	bf18      	it	ne
 8004260:	b236      	sxthne	r6, r6
 8004262:	e7ef      	b.n	8004244 <_printf_i+0xbc>
 8004264:	682b      	ldr	r3, [r5, #0]
 8004266:	6820      	ldr	r0, [r4, #0]
 8004268:	1d19      	adds	r1, r3, #4
 800426a:	6029      	str	r1, [r5, #0]
 800426c:	0601      	lsls	r1, r0, #24
 800426e:	d501      	bpl.n	8004274 <_printf_i+0xec>
 8004270:	681e      	ldr	r6, [r3, #0]
 8004272:	e002      	b.n	800427a <_printf_i+0xf2>
 8004274:	0646      	lsls	r6, r0, #25
 8004276:	d5fb      	bpl.n	8004270 <_printf_i+0xe8>
 8004278:	881e      	ldrh	r6, [r3, #0]
 800427a:	4854      	ldr	r0, [pc, #336]	; (80043cc <_printf_i+0x244>)
 800427c:	2f6f      	cmp	r7, #111	; 0x6f
 800427e:	bf0c      	ite	eq
 8004280:	2308      	moveq	r3, #8
 8004282:	230a      	movne	r3, #10
 8004284:	2100      	movs	r1, #0
 8004286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800428a:	6865      	ldr	r5, [r4, #4]
 800428c:	60a5      	str	r5, [r4, #8]
 800428e:	2d00      	cmp	r5, #0
 8004290:	bfa2      	ittt	ge
 8004292:	6821      	ldrge	r1, [r4, #0]
 8004294:	f021 0104 	bicge.w	r1, r1, #4
 8004298:	6021      	strge	r1, [r4, #0]
 800429a:	b90e      	cbnz	r6, 80042a0 <_printf_i+0x118>
 800429c:	2d00      	cmp	r5, #0
 800429e:	d04d      	beq.n	800433c <_printf_i+0x1b4>
 80042a0:	4615      	mov	r5, r2
 80042a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80042a6:	fb03 6711 	mls	r7, r3, r1, r6
 80042aa:	5dc7      	ldrb	r7, [r0, r7]
 80042ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80042b0:	4637      	mov	r7, r6
 80042b2:	42bb      	cmp	r3, r7
 80042b4:	460e      	mov	r6, r1
 80042b6:	d9f4      	bls.n	80042a2 <_printf_i+0x11a>
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d10b      	bne.n	80042d4 <_printf_i+0x14c>
 80042bc:	6823      	ldr	r3, [r4, #0]
 80042be:	07de      	lsls	r6, r3, #31
 80042c0:	d508      	bpl.n	80042d4 <_printf_i+0x14c>
 80042c2:	6923      	ldr	r3, [r4, #16]
 80042c4:	6861      	ldr	r1, [r4, #4]
 80042c6:	4299      	cmp	r1, r3
 80042c8:	bfde      	ittt	le
 80042ca:	2330      	movle	r3, #48	; 0x30
 80042cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80042d4:	1b52      	subs	r2, r2, r5
 80042d6:	6122      	str	r2, [r4, #16]
 80042d8:	f8cd a000 	str.w	sl, [sp]
 80042dc:	464b      	mov	r3, r9
 80042de:	aa03      	add	r2, sp, #12
 80042e0:	4621      	mov	r1, r4
 80042e2:	4640      	mov	r0, r8
 80042e4:	f7ff fee2 	bl	80040ac <_printf_common>
 80042e8:	3001      	adds	r0, #1
 80042ea:	d14c      	bne.n	8004386 <_printf_i+0x1fe>
 80042ec:	f04f 30ff 	mov.w	r0, #4294967295
 80042f0:	b004      	add	sp, #16
 80042f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042f6:	4835      	ldr	r0, [pc, #212]	; (80043cc <_printf_i+0x244>)
 80042f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80042fc:	6829      	ldr	r1, [r5, #0]
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	f851 6b04 	ldr.w	r6, [r1], #4
 8004304:	6029      	str	r1, [r5, #0]
 8004306:	061d      	lsls	r5, r3, #24
 8004308:	d514      	bpl.n	8004334 <_printf_i+0x1ac>
 800430a:	07df      	lsls	r7, r3, #31
 800430c:	bf44      	itt	mi
 800430e:	f043 0320 	orrmi.w	r3, r3, #32
 8004312:	6023      	strmi	r3, [r4, #0]
 8004314:	b91e      	cbnz	r6, 800431e <_printf_i+0x196>
 8004316:	6823      	ldr	r3, [r4, #0]
 8004318:	f023 0320 	bic.w	r3, r3, #32
 800431c:	6023      	str	r3, [r4, #0]
 800431e:	2310      	movs	r3, #16
 8004320:	e7b0      	b.n	8004284 <_printf_i+0xfc>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	f043 0320 	orr.w	r3, r3, #32
 8004328:	6023      	str	r3, [r4, #0]
 800432a:	2378      	movs	r3, #120	; 0x78
 800432c:	4828      	ldr	r0, [pc, #160]	; (80043d0 <_printf_i+0x248>)
 800432e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004332:	e7e3      	b.n	80042fc <_printf_i+0x174>
 8004334:	0659      	lsls	r1, r3, #25
 8004336:	bf48      	it	mi
 8004338:	b2b6      	uxthmi	r6, r6
 800433a:	e7e6      	b.n	800430a <_printf_i+0x182>
 800433c:	4615      	mov	r5, r2
 800433e:	e7bb      	b.n	80042b8 <_printf_i+0x130>
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	6826      	ldr	r6, [r4, #0]
 8004344:	6961      	ldr	r1, [r4, #20]
 8004346:	1d18      	adds	r0, r3, #4
 8004348:	6028      	str	r0, [r5, #0]
 800434a:	0635      	lsls	r5, r6, #24
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	d501      	bpl.n	8004354 <_printf_i+0x1cc>
 8004350:	6019      	str	r1, [r3, #0]
 8004352:	e002      	b.n	800435a <_printf_i+0x1d2>
 8004354:	0670      	lsls	r0, r6, #25
 8004356:	d5fb      	bpl.n	8004350 <_printf_i+0x1c8>
 8004358:	8019      	strh	r1, [r3, #0]
 800435a:	2300      	movs	r3, #0
 800435c:	6123      	str	r3, [r4, #16]
 800435e:	4615      	mov	r5, r2
 8004360:	e7ba      	b.n	80042d8 <_printf_i+0x150>
 8004362:	682b      	ldr	r3, [r5, #0]
 8004364:	1d1a      	adds	r2, r3, #4
 8004366:	602a      	str	r2, [r5, #0]
 8004368:	681d      	ldr	r5, [r3, #0]
 800436a:	6862      	ldr	r2, [r4, #4]
 800436c:	2100      	movs	r1, #0
 800436e:	4628      	mov	r0, r5
 8004370:	f7fb ff4e 	bl	8000210 <memchr>
 8004374:	b108      	cbz	r0, 800437a <_printf_i+0x1f2>
 8004376:	1b40      	subs	r0, r0, r5
 8004378:	6060      	str	r0, [r4, #4]
 800437a:	6863      	ldr	r3, [r4, #4]
 800437c:	6123      	str	r3, [r4, #16]
 800437e:	2300      	movs	r3, #0
 8004380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004384:	e7a8      	b.n	80042d8 <_printf_i+0x150>
 8004386:	6923      	ldr	r3, [r4, #16]
 8004388:	462a      	mov	r2, r5
 800438a:	4649      	mov	r1, r9
 800438c:	4640      	mov	r0, r8
 800438e:	47d0      	blx	sl
 8004390:	3001      	adds	r0, #1
 8004392:	d0ab      	beq.n	80042ec <_printf_i+0x164>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	079b      	lsls	r3, r3, #30
 8004398:	d413      	bmi.n	80043c2 <_printf_i+0x23a>
 800439a:	68e0      	ldr	r0, [r4, #12]
 800439c:	9b03      	ldr	r3, [sp, #12]
 800439e:	4298      	cmp	r0, r3
 80043a0:	bfb8      	it	lt
 80043a2:	4618      	movlt	r0, r3
 80043a4:	e7a4      	b.n	80042f0 <_printf_i+0x168>
 80043a6:	2301      	movs	r3, #1
 80043a8:	4632      	mov	r2, r6
 80043aa:	4649      	mov	r1, r9
 80043ac:	4640      	mov	r0, r8
 80043ae:	47d0      	blx	sl
 80043b0:	3001      	adds	r0, #1
 80043b2:	d09b      	beq.n	80042ec <_printf_i+0x164>
 80043b4:	3501      	adds	r5, #1
 80043b6:	68e3      	ldr	r3, [r4, #12]
 80043b8:	9903      	ldr	r1, [sp, #12]
 80043ba:	1a5b      	subs	r3, r3, r1
 80043bc:	42ab      	cmp	r3, r5
 80043be:	dcf2      	bgt.n	80043a6 <_printf_i+0x21e>
 80043c0:	e7eb      	b.n	800439a <_printf_i+0x212>
 80043c2:	2500      	movs	r5, #0
 80043c4:	f104 0619 	add.w	r6, r4, #25
 80043c8:	e7f5      	b.n	80043b6 <_printf_i+0x22e>
 80043ca:	bf00      	nop
 80043cc:	080047e1 	.word	0x080047e1
 80043d0:	080047f2 	.word	0x080047f2

080043d4 <memcpy>:
 80043d4:	440a      	add	r2, r1
 80043d6:	4291      	cmp	r1, r2
 80043d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80043dc:	d100      	bne.n	80043e0 <memcpy+0xc>
 80043de:	4770      	bx	lr
 80043e0:	b510      	push	{r4, lr}
 80043e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043ea:	4291      	cmp	r1, r2
 80043ec:	d1f9      	bne.n	80043e2 <memcpy+0xe>
 80043ee:	bd10      	pop	{r4, pc}

080043f0 <memmove>:
 80043f0:	4288      	cmp	r0, r1
 80043f2:	b510      	push	{r4, lr}
 80043f4:	eb01 0402 	add.w	r4, r1, r2
 80043f8:	d902      	bls.n	8004400 <memmove+0x10>
 80043fa:	4284      	cmp	r4, r0
 80043fc:	4623      	mov	r3, r4
 80043fe:	d807      	bhi.n	8004410 <memmove+0x20>
 8004400:	1e43      	subs	r3, r0, #1
 8004402:	42a1      	cmp	r1, r4
 8004404:	d008      	beq.n	8004418 <memmove+0x28>
 8004406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800440a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800440e:	e7f8      	b.n	8004402 <memmove+0x12>
 8004410:	4402      	add	r2, r0
 8004412:	4601      	mov	r1, r0
 8004414:	428a      	cmp	r2, r1
 8004416:	d100      	bne.n	800441a <memmove+0x2a>
 8004418:	bd10      	pop	{r4, pc}
 800441a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800441e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004422:	e7f7      	b.n	8004414 <memmove+0x24>

08004424 <_free_r>:
 8004424:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004426:	2900      	cmp	r1, #0
 8004428:	d044      	beq.n	80044b4 <_free_r+0x90>
 800442a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800442e:	9001      	str	r0, [sp, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f1a1 0404 	sub.w	r4, r1, #4
 8004436:	bfb8      	it	lt
 8004438:	18e4      	addlt	r4, r4, r3
 800443a:	f000 f913 	bl	8004664 <__malloc_lock>
 800443e:	4a1e      	ldr	r2, [pc, #120]	; (80044b8 <_free_r+0x94>)
 8004440:	9801      	ldr	r0, [sp, #4]
 8004442:	6813      	ldr	r3, [r2, #0]
 8004444:	b933      	cbnz	r3, 8004454 <_free_r+0x30>
 8004446:	6063      	str	r3, [r4, #4]
 8004448:	6014      	str	r4, [r2, #0]
 800444a:	b003      	add	sp, #12
 800444c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004450:	f000 b90e 	b.w	8004670 <__malloc_unlock>
 8004454:	42a3      	cmp	r3, r4
 8004456:	d908      	bls.n	800446a <_free_r+0x46>
 8004458:	6825      	ldr	r5, [r4, #0]
 800445a:	1961      	adds	r1, r4, r5
 800445c:	428b      	cmp	r3, r1
 800445e:	bf01      	itttt	eq
 8004460:	6819      	ldreq	r1, [r3, #0]
 8004462:	685b      	ldreq	r3, [r3, #4]
 8004464:	1949      	addeq	r1, r1, r5
 8004466:	6021      	streq	r1, [r4, #0]
 8004468:	e7ed      	b.n	8004446 <_free_r+0x22>
 800446a:	461a      	mov	r2, r3
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	b10b      	cbz	r3, 8004474 <_free_r+0x50>
 8004470:	42a3      	cmp	r3, r4
 8004472:	d9fa      	bls.n	800446a <_free_r+0x46>
 8004474:	6811      	ldr	r1, [r2, #0]
 8004476:	1855      	adds	r5, r2, r1
 8004478:	42a5      	cmp	r5, r4
 800447a:	d10b      	bne.n	8004494 <_free_r+0x70>
 800447c:	6824      	ldr	r4, [r4, #0]
 800447e:	4421      	add	r1, r4
 8004480:	1854      	adds	r4, r2, r1
 8004482:	42a3      	cmp	r3, r4
 8004484:	6011      	str	r1, [r2, #0]
 8004486:	d1e0      	bne.n	800444a <_free_r+0x26>
 8004488:	681c      	ldr	r4, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	6053      	str	r3, [r2, #4]
 800448e:	4421      	add	r1, r4
 8004490:	6011      	str	r1, [r2, #0]
 8004492:	e7da      	b.n	800444a <_free_r+0x26>
 8004494:	d902      	bls.n	800449c <_free_r+0x78>
 8004496:	230c      	movs	r3, #12
 8004498:	6003      	str	r3, [r0, #0]
 800449a:	e7d6      	b.n	800444a <_free_r+0x26>
 800449c:	6825      	ldr	r5, [r4, #0]
 800449e:	1961      	adds	r1, r4, r5
 80044a0:	428b      	cmp	r3, r1
 80044a2:	bf04      	itt	eq
 80044a4:	6819      	ldreq	r1, [r3, #0]
 80044a6:	685b      	ldreq	r3, [r3, #4]
 80044a8:	6063      	str	r3, [r4, #4]
 80044aa:	bf04      	itt	eq
 80044ac:	1949      	addeq	r1, r1, r5
 80044ae:	6021      	streq	r1, [r4, #0]
 80044b0:	6054      	str	r4, [r2, #4]
 80044b2:	e7ca      	b.n	800444a <_free_r+0x26>
 80044b4:	b003      	add	sp, #12
 80044b6:	bd30      	pop	{r4, r5, pc}
 80044b8:	20000344 	.word	0x20000344

080044bc <sbrk_aligned>:
 80044bc:	b570      	push	{r4, r5, r6, lr}
 80044be:	4e0e      	ldr	r6, [pc, #56]	; (80044f8 <sbrk_aligned+0x3c>)
 80044c0:	460c      	mov	r4, r1
 80044c2:	6831      	ldr	r1, [r6, #0]
 80044c4:	4605      	mov	r5, r0
 80044c6:	b911      	cbnz	r1, 80044ce <sbrk_aligned+0x12>
 80044c8:	f000 f8bc 	bl	8004644 <_sbrk_r>
 80044cc:	6030      	str	r0, [r6, #0]
 80044ce:	4621      	mov	r1, r4
 80044d0:	4628      	mov	r0, r5
 80044d2:	f000 f8b7 	bl	8004644 <_sbrk_r>
 80044d6:	1c43      	adds	r3, r0, #1
 80044d8:	d00a      	beq.n	80044f0 <sbrk_aligned+0x34>
 80044da:	1cc4      	adds	r4, r0, #3
 80044dc:	f024 0403 	bic.w	r4, r4, #3
 80044e0:	42a0      	cmp	r0, r4
 80044e2:	d007      	beq.n	80044f4 <sbrk_aligned+0x38>
 80044e4:	1a21      	subs	r1, r4, r0
 80044e6:	4628      	mov	r0, r5
 80044e8:	f000 f8ac 	bl	8004644 <_sbrk_r>
 80044ec:	3001      	adds	r0, #1
 80044ee:	d101      	bne.n	80044f4 <sbrk_aligned+0x38>
 80044f0:	f04f 34ff 	mov.w	r4, #4294967295
 80044f4:	4620      	mov	r0, r4
 80044f6:	bd70      	pop	{r4, r5, r6, pc}
 80044f8:	20000348 	.word	0x20000348

080044fc <_malloc_r>:
 80044fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004500:	1ccd      	adds	r5, r1, #3
 8004502:	f025 0503 	bic.w	r5, r5, #3
 8004506:	3508      	adds	r5, #8
 8004508:	2d0c      	cmp	r5, #12
 800450a:	bf38      	it	cc
 800450c:	250c      	movcc	r5, #12
 800450e:	2d00      	cmp	r5, #0
 8004510:	4607      	mov	r7, r0
 8004512:	db01      	blt.n	8004518 <_malloc_r+0x1c>
 8004514:	42a9      	cmp	r1, r5
 8004516:	d905      	bls.n	8004524 <_malloc_r+0x28>
 8004518:	230c      	movs	r3, #12
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	2600      	movs	r6, #0
 800451e:	4630      	mov	r0, r6
 8004520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004524:	4e2e      	ldr	r6, [pc, #184]	; (80045e0 <_malloc_r+0xe4>)
 8004526:	f000 f89d 	bl	8004664 <__malloc_lock>
 800452a:	6833      	ldr	r3, [r6, #0]
 800452c:	461c      	mov	r4, r3
 800452e:	bb34      	cbnz	r4, 800457e <_malloc_r+0x82>
 8004530:	4629      	mov	r1, r5
 8004532:	4638      	mov	r0, r7
 8004534:	f7ff ffc2 	bl	80044bc <sbrk_aligned>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	4604      	mov	r4, r0
 800453c:	d14d      	bne.n	80045da <_malloc_r+0xde>
 800453e:	6834      	ldr	r4, [r6, #0]
 8004540:	4626      	mov	r6, r4
 8004542:	2e00      	cmp	r6, #0
 8004544:	d140      	bne.n	80045c8 <_malloc_r+0xcc>
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	4631      	mov	r1, r6
 800454a:	4638      	mov	r0, r7
 800454c:	eb04 0803 	add.w	r8, r4, r3
 8004550:	f000 f878 	bl	8004644 <_sbrk_r>
 8004554:	4580      	cmp	r8, r0
 8004556:	d13a      	bne.n	80045ce <_malloc_r+0xd2>
 8004558:	6821      	ldr	r1, [r4, #0]
 800455a:	3503      	adds	r5, #3
 800455c:	1a6d      	subs	r5, r5, r1
 800455e:	f025 0503 	bic.w	r5, r5, #3
 8004562:	3508      	adds	r5, #8
 8004564:	2d0c      	cmp	r5, #12
 8004566:	bf38      	it	cc
 8004568:	250c      	movcc	r5, #12
 800456a:	4629      	mov	r1, r5
 800456c:	4638      	mov	r0, r7
 800456e:	f7ff ffa5 	bl	80044bc <sbrk_aligned>
 8004572:	3001      	adds	r0, #1
 8004574:	d02b      	beq.n	80045ce <_malloc_r+0xd2>
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	442b      	add	r3, r5
 800457a:	6023      	str	r3, [r4, #0]
 800457c:	e00e      	b.n	800459c <_malloc_r+0xa0>
 800457e:	6822      	ldr	r2, [r4, #0]
 8004580:	1b52      	subs	r2, r2, r5
 8004582:	d41e      	bmi.n	80045c2 <_malloc_r+0xc6>
 8004584:	2a0b      	cmp	r2, #11
 8004586:	d916      	bls.n	80045b6 <_malloc_r+0xba>
 8004588:	1961      	adds	r1, r4, r5
 800458a:	42a3      	cmp	r3, r4
 800458c:	6025      	str	r5, [r4, #0]
 800458e:	bf18      	it	ne
 8004590:	6059      	strne	r1, [r3, #4]
 8004592:	6863      	ldr	r3, [r4, #4]
 8004594:	bf08      	it	eq
 8004596:	6031      	streq	r1, [r6, #0]
 8004598:	5162      	str	r2, [r4, r5]
 800459a:	604b      	str	r3, [r1, #4]
 800459c:	4638      	mov	r0, r7
 800459e:	f104 060b 	add.w	r6, r4, #11
 80045a2:	f000 f865 	bl	8004670 <__malloc_unlock>
 80045a6:	f026 0607 	bic.w	r6, r6, #7
 80045aa:	1d23      	adds	r3, r4, #4
 80045ac:	1af2      	subs	r2, r6, r3
 80045ae:	d0b6      	beq.n	800451e <_malloc_r+0x22>
 80045b0:	1b9b      	subs	r3, r3, r6
 80045b2:	50a3      	str	r3, [r4, r2]
 80045b4:	e7b3      	b.n	800451e <_malloc_r+0x22>
 80045b6:	6862      	ldr	r2, [r4, #4]
 80045b8:	42a3      	cmp	r3, r4
 80045ba:	bf0c      	ite	eq
 80045bc:	6032      	streq	r2, [r6, #0]
 80045be:	605a      	strne	r2, [r3, #4]
 80045c0:	e7ec      	b.n	800459c <_malloc_r+0xa0>
 80045c2:	4623      	mov	r3, r4
 80045c4:	6864      	ldr	r4, [r4, #4]
 80045c6:	e7b2      	b.n	800452e <_malloc_r+0x32>
 80045c8:	4634      	mov	r4, r6
 80045ca:	6876      	ldr	r6, [r6, #4]
 80045cc:	e7b9      	b.n	8004542 <_malloc_r+0x46>
 80045ce:	230c      	movs	r3, #12
 80045d0:	603b      	str	r3, [r7, #0]
 80045d2:	4638      	mov	r0, r7
 80045d4:	f000 f84c 	bl	8004670 <__malloc_unlock>
 80045d8:	e7a1      	b.n	800451e <_malloc_r+0x22>
 80045da:	6025      	str	r5, [r4, #0]
 80045dc:	e7de      	b.n	800459c <_malloc_r+0xa0>
 80045de:	bf00      	nop
 80045e0:	20000344 	.word	0x20000344

080045e4 <_realloc_r>:
 80045e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045e8:	4680      	mov	r8, r0
 80045ea:	4614      	mov	r4, r2
 80045ec:	460e      	mov	r6, r1
 80045ee:	b921      	cbnz	r1, 80045fa <_realloc_r+0x16>
 80045f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045f4:	4611      	mov	r1, r2
 80045f6:	f7ff bf81 	b.w	80044fc <_malloc_r>
 80045fa:	b92a      	cbnz	r2, 8004608 <_realloc_r+0x24>
 80045fc:	f7ff ff12 	bl	8004424 <_free_r>
 8004600:	4625      	mov	r5, r4
 8004602:	4628      	mov	r0, r5
 8004604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004608:	f000 f838 	bl	800467c <_malloc_usable_size_r>
 800460c:	4284      	cmp	r4, r0
 800460e:	4607      	mov	r7, r0
 8004610:	d802      	bhi.n	8004618 <_realloc_r+0x34>
 8004612:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004616:	d812      	bhi.n	800463e <_realloc_r+0x5a>
 8004618:	4621      	mov	r1, r4
 800461a:	4640      	mov	r0, r8
 800461c:	f7ff ff6e 	bl	80044fc <_malloc_r>
 8004620:	4605      	mov	r5, r0
 8004622:	2800      	cmp	r0, #0
 8004624:	d0ed      	beq.n	8004602 <_realloc_r+0x1e>
 8004626:	42bc      	cmp	r4, r7
 8004628:	4622      	mov	r2, r4
 800462a:	4631      	mov	r1, r6
 800462c:	bf28      	it	cs
 800462e:	463a      	movcs	r2, r7
 8004630:	f7ff fed0 	bl	80043d4 <memcpy>
 8004634:	4631      	mov	r1, r6
 8004636:	4640      	mov	r0, r8
 8004638:	f7ff fef4 	bl	8004424 <_free_r>
 800463c:	e7e1      	b.n	8004602 <_realloc_r+0x1e>
 800463e:	4635      	mov	r5, r6
 8004640:	e7df      	b.n	8004602 <_realloc_r+0x1e>
	...

08004644 <_sbrk_r>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	4d06      	ldr	r5, [pc, #24]	; (8004660 <_sbrk_r+0x1c>)
 8004648:	2300      	movs	r3, #0
 800464a:	4604      	mov	r4, r0
 800464c:	4608      	mov	r0, r1
 800464e:	602b      	str	r3, [r5, #0]
 8004650:	f7fd f882 	bl	8001758 <_sbrk>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	d102      	bne.n	800465e <_sbrk_r+0x1a>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	b103      	cbz	r3, 800465e <_sbrk_r+0x1a>
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	bd38      	pop	{r3, r4, r5, pc}
 8004660:	2000034c 	.word	0x2000034c

08004664 <__malloc_lock>:
 8004664:	4801      	ldr	r0, [pc, #4]	; (800466c <__malloc_lock+0x8>)
 8004666:	f000 b811 	b.w	800468c <__retarget_lock_acquire_recursive>
 800466a:	bf00      	nop
 800466c:	20000350 	.word	0x20000350

08004670 <__malloc_unlock>:
 8004670:	4801      	ldr	r0, [pc, #4]	; (8004678 <__malloc_unlock+0x8>)
 8004672:	f000 b80c 	b.w	800468e <__retarget_lock_release_recursive>
 8004676:	bf00      	nop
 8004678:	20000350 	.word	0x20000350

0800467c <_malloc_usable_size_r>:
 800467c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004680:	1f18      	subs	r0, r3, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	bfbc      	itt	lt
 8004686:	580b      	ldrlt	r3, [r1, r0]
 8004688:	18c0      	addlt	r0, r0, r3
 800468a:	4770      	bx	lr

0800468c <__retarget_lock_acquire_recursive>:
 800468c:	4770      	bx	lr

0800468e <__retarget_lock_release_recursive>:
 800468e:	4770      	bx	lr

08004690 <_init>:
 8004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004692:	bf00      	nop
 8004694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004696:	bc08      	pop	{r3}
 8004698:	469e      	mov	lr, r3
 800469a:	4770      	bx	lr

0800469c <_fini>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	bf00      	nop
 80046a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a2:	bc08      	pop	{r3}
 80046a4:	469e      	mov	lr, r3
 80046a6:	4770      	bx	lr
